// framework from https://forum.cockos.com/showthread.php?t=190168#30 by Tale

// Part of the Reaper-Surround suite by junh1024
desc:
desc:FFT 6ch example with settings
slider1:100<0,200,1>Unused
slider2:0<-180,180,1>Unused
slider3:40<0,50,5>Overlap (%)
slider4:12<10,14,1>FFT size (pow2)

@init



pdc_bot_ch = 0;
pdc_top_ch = 6;


sixteen_k=32768;



buf1_in			= sixteen_k*1;
buf1_fft		= sixteen_k*2;
buf1_out		= sixteen_k*3;
buf1_org		= sixteen_k*4;

buf2_in			= sixteen_k*5;
buf2_fft		= sixteen_k*6;
buf2_out		= sixteen_k*7;
buf2_org		= sixteen_k*8;


overlap_sel		= sixteen_k*9;
window = sixteen_k*10;

pi=3.141592653589793238;
Angle_Difference=sixteen_k*41;
Angle_Difference_old=sixteen_k*42;
Fixed_Response=0.5;
Magnitudes1=sixteen_k*11;
Magnitudes2=sixteen_k*12;
Magnitudes3=sixteen_k*13;
Magnitudes4=sixteen_k*14;

Magnitudes1_old=sixteen_k*21;
Magnitudes2_old=sixteen_k*22;
Magnitudes3_old=sixteen_k*23;
Magnitudes4_old=sixteen_k*24;

L_scaling_array=sixteen_k*31;
L_scaling_old_array=sixteen_k*32;


overlap_sel[0]=0.0625;		// 1/16
overlap_sel[1]=0.125;		// 1/8
overlap_sel[2]=0.25;		// 1/4
overlap_sel[3]=0.3125;		// 5/16 or 1/3.2
overlap_sel[4]=0.390625;	// 25/64 or 1/2.56
overlap_sel[5]=0.5;			// 1/2
overlap_w=overlap=0;


pos=pos2=0;



@slider
fftsize=2^slider4;
pdc_delay = fftsize - 1;
scale = 1/fftsize;

inspector1=floor(slider3/10);
overlap_w=overlap_sel[floor(slider3/10)];
// overlap_w=slider3/100;
overlap=floor(overlap_w*fftsize);
i = 0;
loop(fftsize,
	window[i] = min( (0.5 /overlap_w) - abs( (1/overlap_w) *i / fftsize -(0.5/overlap_w)), 1); // adjustable Trapezium window
	i += 1;
);

// gain = 10^(slider1 / 20);
offset = 2*pi / 360 * slider2;

Amount=slider1/100;



@sample


// Buffer input

buf1_in[2*overlap + pos]	= spl0 * scale;
buf1_in[2*overlap + pos+1]	= spl1 * scale;

// buf2_in[2*overlap + pos]	= spl0 * scale;
// buf2_in[2*overlap + pos+1]	= spl1 * scale;

(pos += 2) >= (fftsize - overlap )*2? (
	pos = 0;

	// Apply window
	i = 0;
	loop(fftsize,
		buf1_fft[i]		= buf1_in[i] * window[i/2];
		buf1_fft[i + 1]	= buf1_in[i+1] * window[i/2];
		
		// buf2_fft[i]		= buf2_in[i] * window[i/2];
		// buf2_fft[i + 1]	= buf2_in[i+1] * window[i/2];



		i += 2;
	);

	// Overlap input
	memcpy(buf1_in, buf1_in + fftsize*2 - overlap*2, overlap*2);
	// memcpy(buf2_in, buf2_in + fftsize*2 - overlap*2, overlap*2);

	// FFT
	fft(buf1_fft, fftsize);
	fft_permute(buf1_fft, fftsize);
	
	// fft(buf2_fft, fftsize);
	// fft_permute(buf2_fft, fftsize);

	i = 0;
	loop(fftsize / 2 + 1,
	
	
	// abs();
		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;
 

		x =	buf1_fft[a];
		y =	buf1_fft[b];
		x2=	buf1_fft[a2];
		y2=	buf1_fft[b2];

		// for fft tool
		// x_two =	buf2_fft[a];
		// y_two =	buf2_fft[b];
		// x2_two=	buf2_fft[a2];
		// y2_two=	buf2_fft[b2];

		
		
		 left_r = (x + x2)*0.5;
		 left_i = (y - y2)*0.5;
		right_r = (y + y2)*0.5;
		right_i = (x2 - x)*0.5;
		
		Magnitudes1[i]=sqrt(left_r^2+left_i^2); //+very_small_number*0.1
		Magnitudes2[i]=sqrt(right_r^2+right_i^2);
		// Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
		// Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);
		
		//use CPU to simulate a bigger FX
		// test=atan2(sin(rand(1)),cos(rand(1)));
		
		//algorithm to select side content, based on "2.0 to 5.0 Upmix V3 (L).txt"
		
		an1=atan2(left_r,left_i); //radians, normalize to 0,2pi
		an2=atan2(right_r,right_i);	
		Angle_Difference[i]=abs(an1-an2);	
		
		// ad=Angle_Difference[i];
		Angle_Difference[i]>pi?Angle_Difference[i]=2*pi-Angle_Difference[i];//fix angle difference cuz should be under 180*
		
		Angle_Difference[i]=Angle_Difference[i]*(Fixed_Response)+Angle_Difference_old[i]*(1-Fixed_Response);
		Angle_Difference_old[i]=Angle_Difference[i];

		
		// P_scaling=1;
		// Angle_Difference[i]<pi*0.5?P_scaling=0;
		
		// P_scaling=Angle_Difference/pi;
		
		
		Rear_threshold=pi/2;
		Crossover_width=pi/2.5;
		
		P_scaling= 1-min(max( ( 1-(Angle_Difference[i]-Rear_threshold+(Crossover_width/2))*1*(1/Crossover_width) )   ,0)     ,1)  ;
		
		
		/*
			L_scaling_array[i]=max(Magnitudes1[i]-Magnitudes2[i]*Amount,0)/Magnitudes1[i];
			
			i<(fftsize/3) && L_scaling_array[i] < L_scaling_old_array[i]? 
			(
				L_scaling=L_scaling_array[i]*(0.5)+L_scaling_old_array[i]*(1-0.5);
			)
			:
			(	//equivalent to response of 1
				L_scaling =L_scaling_array[i];
			);
			
			L_scaling_old_array[i]=L_scaling_array[i]*(0.5)+L_scaling_old_array[i]*(1-0.5);
	// P_scaling=L_scaling;
	
	*/
		

		
		 left_r*=P_scaling;
		 left_i*=P_scaling;
		right_r*=P_scaling;
		right_i*=P_scaling;


		buf1_fft[a]	= left_r - right_i;
		buf1_fft[b]	= left_i + right_r;
		buf1_fft[a2]= left_r + right_i;
		buf1_fft[b2]= right_r - left_i;
		
		
		//prepare c
		buf2_fft[a] = center_r;
		buf2_fft[b] = center_i;
		buf2_fft[a2]= center_r;
		buf2_fft[b2]=-center_i;


		i += 2;
	);

	// Inverse FFT
	fft_ipermute(buf1_fft, fftsize);
	ifft(buf1_fft, fftsize);
	
	fft_ipermute(buf2_fft, fftsize);
	ifft(buf2_fft, fftsize);

	// Overlap-add output
	memcpy(buf1_out, buf1_out + 2*fftsize - 2*overlap, 2*overlap);
	memset(buf1_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	memcpy(buf2_out, buf2_out + 2*fftsize - 2*overlap, 2*overlap);
	memset(buf2_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	i = 0;
	loop(fftsize,
		buf1_out[i] += buf1_fft[i];
		buf1_out[i+1] += buf1_fft[i+1];
		
		buf2_out[i] += buf2_fft[i];
		// buf2_out[i+1] += buf2_fft[i+1];
		
		
		i += 2;
	);
);

//buffer the original spl0
out4 = buf1_org[pos2]  ;
out5 = buf1_org[pos2+1];

buf1_org[pos2] =  spl0;
buf1_org[pos2+1] =  spl1;

// spl4=out4;
// spl5=out5;

pos2=(pos2+2)%(pdc_delay*2);


spl0 = buf1_out[pos];
spl1 = buf1_out[pos+1];



//subtract front from original spl0 to get back
spl4=out4-spl0;
spl5=out5-spl1;
// spl4=out4-out0-(h_sqrt_2*out2);
// spl5=out5-out1-(h_sqrt_2*out2);
