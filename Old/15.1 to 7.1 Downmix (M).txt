desc:15.1 to 7.1 Downmix (DONT USE DEPRECATED & WRONG)

slider1:100<0,100,1>ELL Width
slider2:100<0,100,1>Height Width//need a ELL width
slider3:0<0,1,1{Off,On}>(Matrix Height)
@init
polarity=-1;
pan_law=3.00  ;//wrong

@slider
ELL_W=slider1/100   ;
top_W=slider2/100   ;
slider3 == 1 ? polarity = -1 : polarity = 1;

@sample 

front_M =(spl0 +spl1)*0.5;
front_S =(spl0 -spl1)*0.5; 
back_M  =(spl4+spl5)*0.5;
back_S  =(spl4-spl5)*0.5; 
side_M  =(spl6+spl7)*0.5;
side_S  =(spl6-spl7)*0.5; 

spl0=(front_M * pan_law)+ (front_S * ELL_W) ;
spl1=(front_M * pan_law)- (front_S * ELL_W) ;
spl4=(back_M  * pan_law)+ (back_S  * ELL_W) ;
spl5=(back_M  * pan_law)- (back_S  * ELL_W) ;
spl6=(side_M  * pan_law)+ (side_S  * ELL_W) ;
spl7=(side_M  * pan_law)- (side_S  * ELL_W) ;

//need top first otherwise bottom gets silenced, convert top to M/S
top_front_M =(spl8 +spl9 )*0.5;
top_front_S =(spl8 -spl9 )*0.5; 
top_back_M  =(spl12+spl13)*0.5;
top_back_S  =(spl12-spl13)*0.5; 
top_side_M  =(spl14+spl15)*0.5;
top_side_S  =(spl14-spl15)*0.5; 

//decode M/S with polarity
spl8 = ( (top_front_M * pan_law)+ (top_front_S * top_W) ) ;
spl9 = ( (top_front_M * pan_law)- (top_front_S * top_W) ) *polarity;
spl12= ( (top_back_M  * pan_law)+ (top_back_S  * top_W) ) ;
spl13= ( (top_back_M  * pan_law)- (top_back_S  * top_W) ) *polarity;
spl14= ( (top_side_M  * pan_law)+ (top_side_S  * top_W) ) ;
spl15= ( (top_side_M  * pan_law)- (top_side_S  * top_W) ) *polarity;

//downmix
spl0 += spl8 + spl10; //top C & LFE are a L & R of a new bottom layer
spl1 += spl9 + spl11;
spl4 += spl12;
spl5 += spl13;
spl6 += spl14;
spl7 += spl15;

//silence
spl8 = 0;
spl9 = 0;
spl10= 0;
spl11= 0;
spl12= 0;
spl13= 0;
spl14= 0;
spl15= 0;
