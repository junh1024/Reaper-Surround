desc: mono to 15.1/7.1 panner GUI. ALPHA.

slider1:0<-180,180>Pan (deg)
slider2:0<-100,100,5>Height
slider3:100<0,100,5>Width  
slider4:0<0,100,5>Center

slider5:0<0,3,{Move (Mixing),Copy (Mixing),Move (Monitoring),Copy (Monitoring)}>LFE Mode
slider6:0<0,100,1>LFE amount (%)
slider7:1<0,2,1,{2D 7.1,2.5D 15.1,3D-ish 15.1}>Pan mode
slider8:8<0,16,1>Pan threshold

import surroundlib1.txt

import surroundlib2.txt
import surroundlib3.txt

@init
theta=rad=0;
in0=0;
new_x=new_y=0;
height_temp=0;



//LFE
LFE_mode_gain=1;//monitoring 0dB default;
main_gain=1;
coeff_A=0;
coeff_B=0;

center_coeff_forced_width=0;


function do_slider_stuff()
(
	center_coeff=slider4/100; 
	center_coeff_forced_width=max(1-(abs(slider1)/30),0);

);

@slider
ELL_W=slider3/100;
top_W=slider3/100;

do_slider_stuff();

//LFE stuff
LFE_pan_coeff=(slider6*$pi)/200; //depth scaled from 0-100 to 0>half pi
calculate_depth_coeffs(LFE_pan_coeff);

//move or copy mode
slider5%2==0?(main_gain=coeff_B):(main_gain=1;);

//LFE mixing -10dB gain, LFE monitoring 0dB gain.
slider5<2?(LFE_mode_gain=0.316):(LFE_mode_gain=1;);


@sample 
in0=(spl0+spl1)*0.7071; //loudness compensation


do_10_to_71_pan(in0);
do_71_to_151_pan(slider2);

slider7==0 &&slider3<100 ? //activate only in 2D & close panning
(
	//top width for top panning
	MS_encode_ELL();

	//MS decode ELL
	spl0=(front_M)+ (front_S * ELL_W) ;
	spl1=(front_M)- (front_S * ELL_W) ;
	spl4=(back_M )+ (back_S  * ELL_W) ;
	spl5=(back_M )- (back_S  * ELL_W) ;
	spl6=(side_M )+ (side_S  * ELL_W) ;
	spl7=(side_M )- (side_S  * ELL_W) ;

	//ell depth bleed for ell panning

	spl16 += (spl0+spl4) * (100-slider3 )/100 ;
	spl17 += (spl1+spl5) * (100-slider3 )/100 ;

	spl0 *= slider3/100 ;
	spl1 *= slider3/100 ;
	spl4*= slider3/100 ;
	spl5*= slider3/100 ;
);
slider7==1 &&slider3<100? //activate only in 3D & top panning
(
	//need top first otherwise bottom gets silenced, convert top to M/S
	 MS_encode_Top();

	//decode M/S with polarity
	spl8 = ( (top_front_M)+ (top_front_S * top_W) ) ;
	spl9 = ( (top_front_M)- (top_front_S * top_W) ) ;
	spl12= ( (top_back_M )+ (top_back_S  * top_W) ) ;
	spl13= ( (top_back_M )- (top_back_S  * top_W) ) ;
	spl14= ( (top_side_M )+ (top_side_S  * top_W) ) ;
	spl15= ( (top_side_M )- (top_side_S  * top_W) ) ;

	//top depth bleed for top panning

	spl14 += (spl8+spl12) * (100-slider3 )/100 ;
	spl15 += (spl9+spl13) * (100-slider3 )/100 ;

	spl8 *= slider3/100 ;
	spl9 *= slider3/100 ;
	spl12*= slider3/100 ;
	spl13*= slider3/100 ;

);


//lfe
spl3=in0*LFE_mode_gain*coeff_A;
spl0*=main_gain;
spl1*=main_gain;



//center
C_temp = (spl0+spl1)*.7071;
L_temp = (spl0-spl1)*.5;
LR_common=(C_temp)*0.7071*(1-(center_coeff*center_coeff_forced_width));

spl2=C_temp*(center_coeff*center_coeff_forced_width);

spl0=  LR_common + L_temp  ;
spl1=  LR_common - L_temp ;

// conv polar to cart for displ automation
(slider7==0)?(height_temp=100;):(height_temp=slider2;);
temp_rad=(155-((100-slider3)/1.8+ height_temp))/(155*2);
temp_theta=(slider1*$pi/180)+$pi/2;
new_x=-cos(temp_theta)*temp_rad*gfx_w+(gfx_w/2);
new_y=-sin(temp_theta)*temp_rad*gfx_h+(gfx_h/2);


@gfx 500 500
pan=slider1;//pan, from clockwise, degrees
calculate_10_to_71_coeffs (pan);
calculate_71_to_151_coeffs_pc(slider2);
pan_thresh=slider8;

// box_width=16;
//box size scales with window size, hits 16 at 500x500
//while not being too small for smaller sizes, like MCP embedding
box_width=floor(0.7*sqrt((gfx_w+gfx_h)/2));

gfx_a = 0.8;
gfx_r = gfx_g = gfx_b = 0;

gfx_x = 0; gfx_y = 0;


//draw ELL speakers

//LR = cyan = includes bottom
gfx_g =1;
gfx_b =1;
drawbox(gfx_w/3,0);
drawbox(gfx_w*2/3,0);

//center
gfx_b =0;
drawbox(gfx_w/2,0);

//Surround
drawbox(gfx_w/3,gfx_h);
drawbox(gfx_w*2/3,gfx_h);

drawbox(0,gfx_h/2);
drawbox(gfx_w,gfx_h/2);

//draw height

slider7>0?
(
	gfx_g = gfx_b = 0;
	gfx_r = 0.8;
);

height_toe_in=gfx_w/20;

drawbox(gfx_w/3+height_toe_in,gfx_h/3);
drawbox(gfx_w*2/3-height_toe_in,gfx_h/3);

//H S
drawbox(gfx_w/3+height_toe_in,gfx_h*2/3);
drawbox(gfx_w*2/3-height_toe_in,gfx_h*2/3);

drawbox(gfx_w/3-height_toe_in/2,gfx_h/2);
drawbox(gfx_w*2/3+height_toe_in/2,gfx_h/2);

//if mouse is within threshold of pan knob
(mouse_cap ==1 /*&& mouse_x >=pan_x-box_width*pan_thresh && mouse_y >= pan_y -box_width*pan_thresh && mouse_x <=pan_x+box_width*pan_thresh && mouse_y <= pan_y +box_width*pan_thresh */ ) ? 
(
	do_slider_stuff();
	
	//compute numbers as if the origin was the center
	pan_x2=mouse_x-gfx_w/2  ;
	pan_y2=-(mouse_y-gfx_h/2);
	
	//the floor calls are to make whole numbers for sliders/UI
	
	//convert to polar for pan
	theta = atan2(pan_y2,pan_x2);
	slider1=floor(theta*-180/$pi)+90;
	slider1>180?slider1=-180 + ( slider1-180 );
	
	rad=sqrt(pan_x2^2+pan_y2^2 )/(gfx_w+gfx_h);
	slider2=floor((0.25-rad*1.01 )*620);
	
	slider2>100? //width to emulate top pan
	(
		slider3=floor(min(100-(slider2-100)*1.8,100));
		slider2=100;
	):
	(
		slider3=100;//not top
	);
	
	!(slider1<=30 && slider1>=-30&&slider7==2)? 
	(
		slider2=max(0,slider2) // restrict bottom panning to front
	);
	
	slider7<1?(slider2=0;);// restrict height panning to 3D
	
	ELL_W=slider3/100   ;
	top_W=slider3/100   ;
	
	slider_automate(slider1);//to draw automation outside of the @slider section
	slider_automate(slider2);
	slider_automate(slider3);


	gfx_r = gfx_g = gfx_b = 1;
	gfx_a+=in0*0.2; //blink box according to input
	drawbox(mouse_x,mouse_y );
	
):
(	//no mouse activity, displ automation
	gfx_g =  0.8; //yellow due to set red previously



	box_width*=2; //enlarged box 
	drawbox(new_x,new_y);
	// box_width/=2;//set back to original box 
);


