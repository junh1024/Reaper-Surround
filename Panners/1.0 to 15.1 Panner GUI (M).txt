desc: mono to 15.1/7.1 panner GUI. (phantom center) ALPHA.

slider1:0<-180,180>Pan (deg)
slider2:0<-100,100,5>Height
slider3:100<0,100,5>Width  
slider4:0<-100,100,5>Center (NOT IMPLEMENTED)

slider5:0<0,3,{Move (Mixing),Copy (Mixing),Move (Monitoring),Copy (Monitoring)}>LFE Mode
slider6:0<0,100,1>LFE amount (%)
slider7:1<0,1,{2D 7.1,3D 15.1}>Pan mode
slider8:8<0,16,1>Pan threshold

slider9:.5<0,1,0.01>posX
slider10:0<-0.5,1,.01>posY

import surroundlib1.txt

import surroundlib2.txt
import surroundlib3.txt

@init
pan_x=0;
pan_y=0;
theta=rad=0;
in0=0;


// polarity=1;

function drawbox(x,y)
(
	gfx_x=x-box_width/2;
	gfx_y=y-box_width/2;
	gfx_rectto(x+box_width/2,y+box_width/2)
);

//LFE
LFE_mode_gain=1;//monitoring 0dB default;
main_gain=1;
coeff_A=0;
coeff_B=0;



@slider
ELL_W=slider3/100   ;
top_W=slider3/100   ;

//LFE stuff
LFE_pan_coeff=(slider6*$pi)/200; //depth scaled from 0-100 to 0>half pi
calculate_depth_coeffs(LFE_pan_coeff);

//move or copy mode
slider5%2==0?(main_gain=coeff_B):(main_gain=1;);

//LFE mixing -10dB gain, LFE monitoring 0dB gain.
slider5<2?(LFE_mode_gain=0.316):(LFE_mode_gain=1;);


@sample 
in0=(spl0+spl1)*0.7071; //loudness compensation



do_10_to_71_pan(in0);
do_71_to_151_pan(slider2);

slider7==0 &&slider3<100 ? //activate only in 2D & close panning
(
//top width for top panning
MS_encode_ELL();

//MS decode ELL
spl0=(front_M)+ (front_S * ELL_W) ;
spl1=(front_M)- (front_S * ELL_W) ;
spl4=(back_M )+ (back_S  * ELL_W) ;
spl5=(back_M )- (back_S  * ELL_W) ;
spl6=(side_M )+ (side_S  * ELL_W) ;
spl7=(side_M )- (side_S  * ELL_W) ;

//ell depth bleed for ell panning

spl16 += (spl0+spl4) * (100-slider3 )/100 ;
spl17 += (spl1+spl5) * (100-slider3 )/100 ;

spl0 *= slider3/100 ;
spl1 *= slider3/100 ;
spl4*= slider3/100 ;
spl5*= slider3/100 ;
);
slider7==1 &&slider3<100? //activate only in 3D & top panning
(
//need top first otherwise bottom gets silenced, convert top to M/S
 MS_encode_Top();

//decode M/S with polarity
spl8 = ( (top_front_M)+ (top_front_S * top_W) ) ;
spl9 = ( (top_front_M)- (top_front_S * top_W) ) ;
spl12= ( (top_back_M )+ (top_back_S  * top_W) ) ;
spl13= ( (top_back_M )- (top_back_S  * top_W) ) ;
spl14= ( (top_side_M )+ (top_side_S  * top_W) ) ;
spl15= ( (top_side_M )- (top_side_S  * top_W) ) ;

//top depth bleed for top panning

spl14 +=    (spl8+spl12) * (100-slider3 )/100 ;
spl15 += (spl9+spl13) * (100-slider3 )/100 ;

spl8 *= slider3/100 ;
spl9 *= slider3/100 ;
spl12*= slider3/100 ;
spl13*= slider3/100 ;

);


//lfe
spl3=in0*LFE_mode_gain*coeff_A;
spl0*=main_gain;
spl1*=main_gain;

@gfx 500 500
pan=slider1;//pan, from clockwise, degrees
calculate_10_to_71_coeffs (pan);
calculate_71_to_151_coeffs_pc(slider2);
pan_thresh=slider8;

// box_width=16;
box_width=floor(0.7*sqrt((gfx_w+gfx_h)/2));

// draw box
// draw speaker

// convert rect polar
// convert polar rect 

gfx_a = 0.8;
gfx_r = gfx_g = gfx_b = 0;

gfx_x = 0; gfx_y = 0;

// v_w=min(gfx_w,gfx_h);
// v_h=v_w;


//draw ELL

//LR cyan
gfx_g =1;
gfx_b =1;
drawbox(gfx_w/3,0);
drawbox(gfx_w*2/3,0);

//Surround
gfx_b =0;
drawbox(gfx_w/3,gfx_h);
drawbox(gfx_w*2/3,gfx_h);

drawbox(0,gfx_h/2);
drawbox(gfx_w,gfx_h/2);

//draw height

slider7==1?
(
	gfx_g = gfx_b = 0;
	gfx_r = 0.8;
);

height_toe_in=gfx_w/20;

drawbox(gfx_w/3+height_toe_in,gfx_h/3);
drawbox(gfx_w*2/3-height_toe_in,gfx_h/3);

//H S
drawbox(gfx_w/3+height_toe_in,gfx_h*2/3);
drawbox(gfx_w*2/3-height_toe_in,gfx_h*2/3);

drawbox(gfx_w/3-height_toe_in/2,gfx_h/2);
drawbox(gfx_w*2/3+height_toe_in/2,gfx_h/2);

//if mouse is within threshold of pan knob
(mouse_cap ==1 /*&& mouse_x >=pan_x-box_width*pan_thresh && mouse_y >= pan_y -box_width*pan_thresh && mouse_x <=pan_x+box_width*pan_thresh && mouse_y <= pan_y +box_width*pan_thresh */ ) ? 
(

	pan_x=mouse_x  ;
	pan_y=mouse_y ;	
	
	//compute numbers as if the origin was the center
	pan_x2=pan_x-gfx_w/2  ;
	pan_y2=-(pan_y-gfx_h/2);
	
	//convert to polar for pan
	theta = atan2(pan_y2,pan_x2);
	slider1=floor(theta*-180/$pi)+90;
	slider1>180?slider1=-180 + ( slider1-180 );
	
	rad=((abs(pan_x2)+abs(pan_y2) )/(gfx_w+gfx_h));
	slider2=(0.25-rad )*(620)-box_width/4;
	
	slider2>100? //width to emulate top pan
	(
		slider3=min(100-(slider2-100)*2,100);
		slider2=100;



		
	):
	(
		slider3=100;//not top
	);
	
	 !(slider1<=30 && slider1>=-30)? 
	 (
	 slider2=max(0,slider2) // restrict bottom panning to front
	 // slider3+ // circular correction
	 );
	
	slider7==0?(slider2=0;);// restrict height panning to 3D
	
	ELL_W=slider3/100   ;
	top_W=slider3/100   ;
	
	slider_automate(slider1);
	slider_automate(slider2);
	slider_automate(slider3);

	slider9=pan_x/gfx_w;
	slider10=pan_y/gfx_h;

);



gfx_r = gfx_g = gfx_b = 1;
gfx_a+=in0*0.5;
drawbox(slider9*gfx_w,slider10*gfx_h);

