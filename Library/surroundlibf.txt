// Part of the Reaper-Surround suite by junh1024
desc:
desc: FFT stuff

@init
//FFT header
sixteen_k=32768; //distance between arrays

memset(sixteen_k*1,0,sixteen_k*60);

buf1_a			= sixteen_k*1;
buf1_b			= sixteen_k*2;
buf1_out		= sixteen_k*3;
buf1_org		= sixteen_k*4;

buf2_a			= sixteen_k*5;
buf2_b			= sixteen_k*6;
buf2_out		= sixteen_k*7;
buf2_org		= sixteen_k*8;

buf3_org		= sixteen_k*9;


overlap_sel		= sixteen_k*58;
window = sixteen_k*59;

pi=3.141592653589793238;

Angles1=sixteen_k*41;
Angles2=sixteen_k*42;
Angles3=sixteen_k*43;
Angles4=sixteen_k*44;
Angle_Difference=sixteen_k*45;
Angle_Difference_old=sixteen_k*46;
Angle_Difference1=sixteen_k*47;
Angle_Difference2=sixteen_k*48;


Magnitudes1=sixteen_k*11;
Magnitudes2=sixteen_k*12;
Magnitudes3=sixteen_k*13;
Magnitudes4=sixteen_k*14;

L_pan=sixteen_k*15;
R_pan=sixteen_k*16;
L_pan_old=sixteen_k*17;
R_pan_old=sixteen_k*18;

Magnitudes1_old=sixteen_k*21;
Magnitudes2_old=sixteen_k*22;
Magnitudes3_old=sixteen_k*23;
Magnitudes4_old=sixteen_k*24;

L_scaling_array=sixteen_k*31;
L_scaling_old_array=sixteen_k*32;
R_scaling_array=sixteen_k*33;
R_scaling_old_array=sixteen_k*34;

	Sideness1=sixteen_k*35;
	Sideness2=sixteen_k*37;
Sideness1_old=sixteen_k*36;
Sideness2_old=sixteen_k*38;

	pos_X=sixteen_k*51;
pos_X_old=sixteen_k*52;
	pos_Y=sixteen_k*53;
pos_Y_old=sixteen_k*54;


L_scaling=R_scaling=0;

overlap_sel[0]=0.0625;		// 1/16
overlap_sel[1]=0.125;		// 1/8
overlap_sel[2]=0.25;		// 1/4
overlap_sel[3]=0.3125;		// 5/16 or 1/3.2
overlap_sel[4]=0.390625;	// 25/64 or 1/2.56
overlap_sel[5]=0.5;			// 1/2
overlap_w=overlap=0;

Rear_threshold=0;
Crossover_width=0;



exceeded=0;

// Fixed_Response=0.5;
Time_Response=0;

pi=3.141592653589793238;
h_pi=pi/2;
h_sqrt_2=0.7071067811865475;


an1=an2=0;

ad1=ad2=p1=p2=0;

phaseadj_l = cos_adj_l =sin_adj_l = 0;

mode=Amount=0;

left_r = left_i = right_r= right_i= 0;
left_r_two = left_i_two = right_r_two= right_i_two= 0;

center_r = center_i = center_r_two = center_i_two = 0;
mid_r  = mid_i  = side_r = side_i = 0;

mid = side = 0;


sum_all_spl=0;

//phase, transient scaling
P_scaling=T_scaling=0;
tmp=a=b=a2=b2=0;


R_width_coeff=0;
	
depth2=0;
doing=0;
	
	
cutoff=cutoff_bins=0;

inspector1=0;
inspector2=0;

elements_to_skip=elements_to_skip_prev=0;
Resp_bins==0;
sum_all_mags=0;

progress=0;


i=0;

pos=pos2=0;

fftsize=fftsize_prev=0;
overlap=overlap_prev=0;

not_silence=1;

//functions
function ms_encode_complex()
(
	mid_r  = (left_r+right_r)*0.5;
	mid_i  = (left_i+right_i)*0.5;
	side_r = (left_r-right_r)*0.5;
	side_i = (left_i-right_i)*0.5;
);

function lr_complex_apply_1_scaling(the_scaling)
(
	 left_r*=the_scaling;
	 left_i*=the_scaling;
	right_r*=the_scaling;
	right_i*=the_scaling;
);

function l2r2_complex_apply_1_scaling(the_scaling)
(
	left_r_two *=the_scaling;
	left_i_two *=the_scaling;
	right_r_two*=the_scaling;
	right_i_two*=the_scaling;
);

function lr_complex_apply_2_scaling(scaling_l, scaling_r)
(
	 left_r*=scaling_l;
	 left_i*=scaling_l;
	right_r*=scaling_r;
	right_i*=scaling_r;
);




function fft_4ch_untangle_mags_2()
(
	x =	buf1_a[a];
	y =	buf1_a[b];
	x2=	buf1_a[a2];
	y2=	buf1_a[b2];

	// for fft tool
	x_two =	buf2_a[a];
	y_two =	buf2_a[b];
	x2_two=	buf2_a[a2];
	y2_two=	buf2_a[b2];
	
	 left_r = (x + x2)*0.5;
	 left_i = (y - y2)*0.5;
	right_r = (y + y2)*0.5;
	right_i = (x2 - x)*0.5;
	
	left_r_two = ( x_two + x2_two)*0.5;
	left_i_two = ( y_two - y2_two)*0.5;
	right_r_two= ( y_two + y2_two)*0.5;
	right_i_two= (x2_two -  x_two )*0.5;
	
	Magnitudes1[i]=sqrt(left_r^2+left_i^2); //+very_small_number*0.1
	Magnitudes2[i]=sqrt(right_r^2+right_i^2);
	Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
	Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);

);


function fft_2ch_untangle_mags_2()
(
	x =	buf1_a[a];
	y =	buf1_a[b];
	x2=	buf1_a[a2];
	y2=	buf1_a[b2];

	
	 left_r = (x + x2)*0.5;
	 left_i = (y - y2)*0.5;
	right_r = (y + y2)*0.5;
	right_i = (x2 - x)*0.5;
	
	Magnitudes1[i]=sqrt(left_r^2+left_i^2); //+very_small_number*0.1
	Magnitudes2[i]=sqrt(right_r^2+right_i^2);

);







function fft_4ch_mags_fast()
(
	Magnitudes1[i]=(left_r^2+left_i^2); //+very_small_number*0.1
	Magnitudes2[i]=(right_r^2+right_i^2);
	Magnitudes3[i]=(left_r_two^2+left_i_two^2);
	Magnitudes4[i]=(right_r_two^2+right_i_two^2);
);

function fft_4ch_untangle()
(
	x =	buf1_a[a];
	y =	buf1_a[b];
	x2=	buf1_a[a2];
	y2=	buf1_a[b2];

	// for fft tool
	x_two =	buf2_a[a];
	y_two =	buf2_a[b];
	x2_two=	buf2_a[a2];
	y2_two=	buf2_a[b2];
	
	 left_r = (x + x2)*0.5;
	 left_i = (y - y2)*0.5;
	right_r = (y + y2)*0.5;
	right_i = (x2 - x)*0.5;
	
	left_r_two = ( x_two + x2_two)*0.5;
	left_i_two = ( y_two - y2_two)*0.5;
	right_r_two= ( y_two + y2_two)*0.5;
	right_i_two= (x2_two -  x_two )*0.5;
);

function ms_complex_set_sideness_center()
(
		//measure the magnitude of M&S, to decide how much should go in C/S
	mid=sqrt(mid_r^2+mid_i^2);
	side=sqrt(side_r^2+side_i^2);
	
	// sd=s/m+s or m-s/m+s
	
	Sideness1[i]=min(side/mid,1); //clamp Sideness1[i] to 1
	
	Sideness1[i]=(Sideness1[i]*(Time_Response))+(Sideness1_old[i]*(1-Time_Response));
	Sideness1_old[i]=Sideness1[i];
	
	//0.7 3dB correction
	center_r = mid_r *2*(1-Sideness1[i])*h_sqrt_2;
	center_i = mid_i *2*(1-Sideness1[i])*h_sqrt_2;

);

function array_1_index_apply_time_response(array, old_array, idx, time_resp)
(
	array[idx]= (array[idx]*(time_resp))+(old_array[idx]*(1-time_resp));
	old_array[idx]=array[idx];
);

//FFTMT functions

function fft_4ch_subtract()
(
	progress=i/(fftsize/2);
	
	//clamp mag to >0, otherwise will make more sound
	//subtract more, as the frequency increases
	L_scaling_array[i]=max(Magnitudes1[i]-Magnitudes3[i]*(Amount+((1-Freq_Response))*progress),0)/Magnitudes1[i];
	R_scaling_array[i]=max(Magnitudes2[i]-Magnitudes4[i]*(Amount+((1-Freq_Response))*progress),0)/Magnitudes2[i];
	
	//temporal averaging for <12khz to sound better, none for >12khz to remove transients. inspired by my newvisp4
	//but too much tends to reduce volume
	
	//if it;s <x khz & not a transient, apply averaging to redude artefacts
	i<(fftsize/3) && L_scaling_array[i] < L_scaling_old_array[i]? 
	(
		L_scaling=(L_scaling_array[i]*(Time_Response))+(L_scaling_old_array[i]*(1-Time_Response));
		R_scaling=(R_scaling_array[i]*(Time_Response))+(R_scaling_old_array[i]*(1-Time_Response));
		
		// L_scaling =L_scaling_array[i];
		// R_scaling =R_scaling_array[i];
	)
	:
	(	//equivalent to response of 1
		L_scaling =L_scaling_array[i];
		R_scaling =R_scaling_array[i];

		// L_scaling=(L_scaling_array[i]+(L_scaling_array[i]*(Time_Response))+(L_scaling_old_array[i]*(1-Time_Response)))/2;
		// R_scaling=(R_scaling_array[i]+(R_scaling_array[i]*(Time_Response))+(R_scaling_old_array[i]*(1-Time_Response)))/2;
						//average of time-scaled response & 1, sounds worse?
	);
	
	L_scaling_old_array[i]=(L_scaling_array[i]*(Time_Response))+(L_scaling_old_array[i]*(1-Time_Response));
	R_scaling_old_array[i]=(R_scaling_array[i]*(Time_Response))+(R_scaling_old_array[i]*(1-Time_Response));

	lr_complex_apply_2_scaling(L_scaling, R_scaling);
);

function check_silence_set_fftsize(memset_range)
(
	//set fftsize to a small value so DSP is skipped
	
	(sqrt(sum_all_spl)/(fftsize - overlap )) <0.000001 ?
	(
		not_silence=0;
		fftsize_prev=fftsize;
		overlap_prev=overlap;
		elements_to_skip_prev=elements_to_skip;
		fftsize=16;
		overlap=0;
		elements_to_skip=0;
		// memset(sixteen_k*1,0,sixteen_k*memset_range);
		memset(buf1_out,0,sixteen_k); //silence buffer otherwise will loop audio
		memset(buf2_out,0,sixteen_k);
	):
	(
		not_silence=1;
	);
	
	sum_all_spl=0;	
);

function check_silence_restore_fftsize()
(
	//restore FFT size so it won't hang
	not_silence==0?
	(
		fftsize=fftsize_prev;
		overlap=overlap_prev;
		elements_to_skip=elements_to_skip_prev;

	);
);

function fft_initialize()
(
	pos = 0;
	memset(buf1_a, 0, 2*fftsize);
	memset(buf1_b, 0, 2*fftsize);
	memset(buf2_a, 0, 2*fftsize);
	memset(buf2_b, 0, 2*fftsize);
	// memset(buf4, 0, 2*fftsize);
	// memset(buf5, 0, 2*fftsize);
	memset(window, 0, fftsize);
	fftsize = sliderfft;
	w = 2.0*$pi/fftsize;
	i = 0;
	
	loop(fftsize/2,
		window[i] = 0.42-0.50*cos(i*w)+0.08*cos(2.0*i*w); //blackman window
		// window[i] =1- (1-abs(i/fftsize)); //triangle window
		// window[i] =min(2- (2-abs(i/fftsize)),1); //trapezium window
		// window[i] = 0.5;
		i += 1;
	); 
	pdc_delay = fftsize;
);