// from https://forum.cockos.com/showthread.php?t=190168#30 by Tale, geraintluff, junh1024

desc: 5.1 to 7.1 FFT upmix. in BETA

slider1:1<0,1,1{Square (Cine-auto thresholds),Circle (ITU)}>Mode
slider2:100<0,200,1>Amount (%)
slider3:50<0,100,1>Side threshold
slider4:100<0,100,1>Crossover width
slider5:75<0,100,1>Cutoff (%)
slider6:1<0,1,0.01>Time Response
slider7:25<0,50,5>FFT Overlap (%)
slider8:12<10,14,1>FFT size (pow2)

import surroundlib2.txt
import surroundlib3.txt
import surroundlibf.txt

in_pin:L
in_pin:R
in_pin:C
in_pin:LFE
in_pin:BL
in_pin:BR

out_pin:L
out_pin:R
out_pin:C
out_pin:LFE
out_pin:BL
out_pin:BR
out_pin:SL
out_pin:SR


@init

//see surroundlibf.txt

pdc_bot_ch = 0;
pdc_top_ch = 9;

out0=out1=out4=out5=0;

@slider

Side_threshold= slider3/100;
Crossover_width=max(slider4/100,0.1);//min of 0.1 since don't want an infinite slope/div 0

Time_Response=slider6;
fftsize=2^slider8;
pdc_delay = fftsize - 1;
scale = 1/fftsize;

// inspector1=floor(slider3/10);
overlap_w=overlap_sel[slider7/10]; //40 % overlap
// overlap_w=slider3/100;
overlap=floor(overlap_w*fftsize);
i = 0;
loop(fftsize,
	window[i] = min( (0.5 /overlap_w) - abs( (1/overlap_w) *i / fftsize -(0.5/overlap_w)), 1); // adjustable Trapezium window
	i += 1;
);

// gain = 10^(slider1 / 20);
offset = 2*pi / 360 * slider2;

Amount=slider2/100;


mode=slider1+1;//cuz I don't like 0-based mode/slider


mode<3? //  >100% amount will make it louder in ambience modes.
(
	Amount=min(Amount,1); //clamp to 100%
);



Response=slider3;

Resp_bins=slider5/100;


elements_to_skip=fftsize-floor(Resp_bins*fftsize);


@sample
//TODO: leak small amount of every into every input to workaround tangling inaccuracies?

// sum_all_spl=(spl0+spl1+spl4+spl5)*0.0001;
// spl0+=sum_all_spl;
// spl1+=sum_all_spl;
// spl4+=sum_all_spl;
// spl5+=sum_all_spl;


// Buffer input

buf1_in[2*overlap + pos]	= spl0 * scale;
buf1_in[2*overlap + pos+1]	= spl1 * scale;

buf2_in[2*overlap + pos]	= spl4 * scale;
buf2_in[2*overlap + pos+1]	= spl5 * scale;

sum_all_spl+=spl0^2+spl1^2+spl4^2+spl5^2;	//silence detector


(pos += 2) >= (fftsize - overlap )*2? (
	pos = 0;

	check_silence_set_fftsize(0); //reduce CPU

	fft_4ch_window_overlap_fft();
	
	//silence the frequencies we are skipping
	memset(buf1_fft+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	memset(buf2_fft+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	

	i = 0;
	loop(fftsize / 2 + 1 - (elements_to_skip/2),
	

		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;
 
		fft_4ch_untangle();
		
		mode==1?
		
		(
			//square mode
			//MS of left side
			mid_r  = (left_r+left_r_two)*0.5;
			mid_i  = (left_i+left_i_two)*0.5;
			side_r = (left_r-left_r_two)*0.5;
			side_i = (left_i-left_i_two)*0.5;
					
			ms_complex_set_sideness_center();
			
			//MS of right side
			mid_r  = (right_r+right_r_two)*0.5;
			mid_i  = (right_i+right_i_two)*0.5;
			side_r = (right_r-right_r_two)*0.5;
			side_i = (right_i-right_i_two)*0.5;
					
			mid=sqrt(mid_r^2+mid_i^2);
			side=sqrt(side_r^2+side_i^2);
			
			// sd=s/m+s or m-s/m+s
			
			Sideness2[i]=min(side/mid,1); //clamp Sideness2[i] to 1
			Sideness2[i]=Sideness2[i]*(Time_Response)+Sideness2_old[i]*(1-Time_Response);
			Sideness2_old[i]=Sideness2[i];
			
			//0.7 3dB correction
			center_r_two = mid_r *2*(1-Sideness2[i])*h_sqrt_2;
			center_i_two = mid_i *2*(1-Sideness2[i])*h_sqrt_2;
			
			buf1_fft[a]	= center_r - center_i_two;
			buf1_fft[b]	= center_i + center_r_two;

			//may reduce glitching when stopped?
			i>0?
			(
				buf1_fft[a2]= center_r + center_i_two;
				buf1_fft[b2]= center_r_two - center_i;
			);

			
		):
		(
			// circle mode
			mid_r  = (left_r_two+right_r_two)*0.5;
			mid_i  = (left_i_two+right_i_two)*0.5;
			side_r = (left_r_two-right_r_two)*0.5;
			side_i = (left_i_two-right_i_two)*0.5;
			
			// Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
			// Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);
			
			// compute pan
			// p2=abs(Magnitudes4[i]-Magnitudes3[i])/(Magnitudes4[i]+Magnitudes3[i])
			
			ms_complex_set_sideness_center();
			// Sideness1[i]=1;
			
			S_scaling= min(max( ( 1-(Sideness1[i]-Side_threshold+(Crossover_width/2))*(1/Crossover_width) )   ,0)     ,1)  ;

			l2r2_complex_apply_1_scaling(S_scaling*Amount);
			
			
			inspector1=Sideness1[i];
			inspector2=S_scaling;
		
			buf1_fft[a]	= left_r_two - right_i_two;
			buf1_fft[b]	= left_i_two + right_r_two;

			
			
			//may reduce glitching when stopped?
			i>0?
			(

				buf1_fft[a2]	= left_r_two + right_i_two;
				buf1_fft[b2]	= right_r_two - left_i_two;
			);
				
			
			
		);
			
			i += 2;
			
		);
		
	// Inverse FFT
	fft_ipermute(buf1_fft, fftsize);
	ifft(buf1_fft, fftsize);

	// Overlap-add output
	memcpy(buf1_out, buf1_out + 2*fftsize - 2*overlap, 2*overlap);
	memset(buf1_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	i = 0;
	loop(fftsize,
		buf1_out[i] += buf1_fft[i];
		buf1_out[i+1] += buf1_fft[i+1];

		i += 2;
	);
	
	check_silence_restore_fftsize();
);

//buffer the original spl0

out0 = buf1_org[pos2]  ;
out1 = buf1_org[pos2+1];

buf1_org[pos2] =  spl0;
buf1_org[pos2+1] =  spl1;

out4 = buf2_org[pos2]  ;
out5 = buf2_org[pos2+1];

buf2_org[pos2] =  spl4;
buf2_org[pos2+1] =  spl5;


out2 = buf3_org[pos2]  ;
out3 = buf3_org[pos2+1];

buf3_org[pos2]	=  spl2;
buf3_org[pos2+1]=  spl3;

//delay c/lfe, necessary cuz they're not output by fft, so don't have delay, so we add delay cuz they're pushed forward by pdc, and you can't have a non-contiguous selection of chans to (not) PDC
spl2=out2;
spl3=out3;

pos2=(pos2+2)%(pdc_delay*2);

mode==1?
(
	spl6 = buf1_out[pos]	*Amount;
	spl7 = buf1_out[pos+1]	*Amount;

	//do output
	spl0 = out0-(spl6*h_sqrt_2);
	spl1 = out1-(spl7*h_sqrt_2);
	spl4 = out4-(spl6*h_sqrt_2);
	spl5 = out5-(spl7*h_sqrt_2);
):
(
	spl0 = out0;
	spl1 = out1;
	spl4 = buf1_out[pos]	;
	spl5 = buf1_out[pos+1];
	spl6 = out4-(spl4);
	spl7 = out5-(spl5);

);



@gfx 500 500
