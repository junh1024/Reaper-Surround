// from https://forum.cockos.com/showthread.php?t=190168#30 by Tale, geraintluff, junh1024

desc: 5.1 to 7.1 FFT upmix. in BETA

slider1:1<0,1,1{Square (Cine-auto thresholds),Circle (ITU),Circle+ (ITU)}>Mode
slider2:100<0,200,1>Amount (%)
slider3:50<0,100,1>Side threshold (66=even power)
slider4:100<0,150,1>Crossover width and diffusion (%)
slider5:75<0,100,1>Frequency Cutoff (%)
slider6:50<0,100,2>Time Response 
slider7:25<0,50,5>FFT Overlap (disabled)
slider8:12<10,14,1>FFT size (pow2)

import surroundlib2.txt
import surroundlib3.txt
import surroundlibf.txt

in_pin:L
in_pin:R
in_pin:C
in_pin:LFE
in_pin:BL
in_pin:BR

out_pin:L
out_pin:R
out_pin:C
out_pin:LFE
out_pin:BL
out_pin:BR
out_pin:SL
out_pin:SR


@init

//see surroundlibf.txt

pdc_bot_ch = 0;
pdc_top_ch = 9;

out0=out1=out4=out5=0;

@slider

Side_threshold= slider3/100;


slider4=min(max(0, slider4),200);
Crossover_width=min(max(slider4/100,0.1),1);//min of 0.1 since don't want an infinite slope/div 0
diffuse_amount=max( (slider4/100) -1,0); //clamp to >0


//parameter migration from old version, which had Frequency & Time response 0-1 instead of 0-100
slider6<2?slider6*=100;
Time_Response=slider6/100;

sliderfft = (2^(slider8))|0;
fftsize != sliderfft ? fft_initialize();

Amount=slider2/100;


mode=slider1+1;//cuz I don't like 0-based mode/slider


mode<3? //  >100% amount will make it louder in ambience modes.
(
	Amount=min(Amount,1); //clamp to 100%
);



Response=slider3;

Resp_bins=slider5/100;


elements_to_skip=fftsize-floor(Resp_bins*fftsize);


@sample
//TODO: leak small amount of every into every input to workaround tangling inaccuracies?

// sum_all_spl=(spl0+spl1+spl4+spl5)*0.0001;
// spl0+=sum_all_spl;
// spl1+=sum_all_spl;
// spl4+=sum_all_spl;
// spl5+=sum_all_spl;


sum_all_spl+=abs(spl0)+abs(spl1)+abs(spl4)+abs(spl5);	//silence detector


pos >= fftsize ?
(
	tmp = buf1_a;
	buf1_a = buf1_b;
	buf1_b = tmp;

	tmp = buf2_a;
	buf2_a = buf2_b;
	buf2_b = tmp;

	check_silence_set_fftsize(0); //reduce CPU
	
	fft(buf1_a, fftsize);
	fft_permute(buf1_a, fftsize);
	
	fft(buf2_a, fftsize);
	fft_permute(buf2_a, fftsize);
	
	//silence the frequencies we are skipping
	memset(buf1_a+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	memset(buf2_a+(fftsize-elements_to_skip), 0, 2*elements_to_skip);	
	

	i = 0;
	loop(fftsize / 2 + 1 - (elements_to_skip/2),
	

		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;
 
		fft_4ch_untangle();
		
		mode==1?
		
		(
			//square mode
			//MS of left side
			mid_r  = (left_r+left_r_two)*0.5;
			mid_i  = (left_i+left_i_two)*0.5;
			side_r = (left_r-left_r_two)*0.5;
			side_i = (left_i-left_i_two)*0.5;
					
			ms_complex_set_sideness_center();
			
			//MS of right side
			mid_r  = (right_r+right_r_two)*0.5;
			mid_i  = (right_i+right_i_two)*0.5;
			side_r = (right_r-right_r_two)*0.5;
			side_i = (right_i-right_i_two)*0.5;
					
			mid=sqrt(mid_r^2+mid_i^2);
			side=sqrt(side_r^2+side_i^2);
			
			// sd=s/m+s or m-s/m+s
			
			Sideness2[i]=min(side/mid,1); //clamp Sideness2[i] to 1
			Sideness2[i]=Sideness2[i]*(Time_Response)+Sideness2_old[i]*(1-Time_Response);
			Sideness2_old[i]=Sideness2[i];
			
			//0.7 3dB correction
			center_r_two = mid_r *2*(1-Sideness2[i])*h_sqrt_2;
			center_i_two = mid_i *2*(1-Sideness2[i])*h_sqrt_2;
			
			buf1_a[a]= center_r - center_i_two;
			buf1_a[b]= center_i + center_r_two;
			buf1_a[a2]= center_r + center_i_two;
			buf1_a[b2]= center_r_two - center_i;


			
		):
		(
			mode==2?
			(
				// circle mode
				mid_r  = (left_r_two+right_r_two)*0.5;
				mid_i  = (left_i_two+right_i_two)*0.5;
				side_r = (left_r_two-right_r_two)*0.5;
				side_i = (left_i_two-right_i_two)*0.5;
				
				// Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
				// Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);
				
				// compute pan
				// p2=abs(Magnitudes4[i]-Magnitudes3[i])/(Magnitudes4[i]+Magnitudes3[i])
				
				ms_complex_set_sideness_center();
				// Sideness1[i]=1;
				
				S_scaling= min(max( ( 1-(Sideness1[i]-Side_threshold+(Crossover_width/2))*(1/Crossover_width) )   ,0)     ,1)  ;

				l2r2_complex_apply_1_scaling(S_scaling*Amount);
				
				
				inspector1=Sideness1[i];
				inspector2=S_scaling;
			
				buf1_a[a]	= left_r_two - right_i_two;
				buf1_a[b]	= left_i_two + right_r_two;
				buf1_a[a2]	= left_r_two + right_i_two;
				buf1_a[b2]	= right_r_two - left_i_two;
			)
			:
			(
				//Circle+ discrete mode by analyzing all 4 ch
				m1=Magnitudes1[i]=sqrt(left_r^2+left_i^2); //+very_small_number*0.1
				m2=Magnitudes2[i]=sqrt(right_r^2+right_i^2);
				m3=Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
				m4=Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);
				
				//how loud rear is compared to front
				p1=m3/(m1+m3);
				p2=m4/(m2+m4);
				
				/*
				rear output (vert axis) as fn of p1 depth pan at defaults
				^(1)
				|   /
				|__/ 
				 ----(1)>
				*/
				
				
				Rear_thresh=100-slider3;
				
				//turn down rear if also in front aka move to sides
				//Rear_thresh/50 = 1 @ defaults
				L_scaling=max(  p1*2 -(Rear_thresh/50) ,0);
				R_scaling=max(  p2*2 -(Rear_thresh/50) ,0);
				
				left_r_two *=L_scaling;
				left_i_two *=L_scaling;
				right_r_two*=R_scaling;
				right_i_two*=R_scaling;
				
				buf1_a[a]	= left_r_two - right_i_two;
				buf1_a[b]	= left_i_two + right_r_two;
				buf1_a[a2]	= left_r_two + right_i_two;
				buf1_a[b2]	= right_r_two - left_i_two;			
			)
			
		);
			
			i += 2;
			
		);
		
	// Inverse FFT
	fft_ipermute(buf1_a, fftsize);
	ifft(buf1_a, fftsize);
	
	check_silence_restore_fftsize();
	pos=0;
);

//windowing?
w1 = window[pos/2];
w2 = window[(fftsize-pos)/2-1];
sw = (w1+w2)*fftsize;

out2 = buf3_org[pos2]  ;
out3 = buf3_org[pos2+1];

buf3_org[pos2]	=  spl2;
buf3_org[pos2+1]=  spl3;

//delay c/lfe, necessary cuz they're not output by fft, so don't have delay, so we add delay cuz they're pushed forward by pdc, and you can't have a non-contiguous selection of chans to (not) PDC
spl2=out2;
spl3=out3;

out0 = (buf1_a[pos]+buf1_b[fftsize+pos])/sw;
out1 = (buf1_a[pos+1]+buf1_b[fftsize+pos+1])/sw;
out4 = (buf2_a[pos]+buf2_b[fftsize+pos])/sw;
out5 = (buf2_a[pos+1]+buf2_b[fftsize+pos+1])/sw;

//buffer inputs
buf1_a[pos] = w1*spl0;
buf1_a[pos+1] = w1*spl1;
buf1_b[fftsize+pos] = w2*spl0;
buf1_b[fftsize+pos+1] = w2*spl1;

buf2_a[pos] = w1*spl4;
buf2_a[pos+1] = w1*spl5;
buf2_b[fftsize+pos] = w2*spl4;
buf2_b[fftsize+pos+1] = w2*spl5;

//buffer the originals
out0_org	= buf1_org[pos2]  ;
out1_org	= buf1_org[pos2+1];
out4_org	= buf2_org[pos2]  ;
out5_org	= buf2_org[pos2+1];

buf1_org[pos2] =  spl0;
buf1_org[pos2+1] =  spl1;
buf2_org[pos2] =  spl4;
buf2_org[pos2+1] =  spl5;



mode==1?
(
	spl6 = out0*Amount;
	spl7 = out1*Amount;

	//do output
	spl0 = out0_org-(spl6*h_sqrt_2);
	spl1 = out1_org-(spl7*h_sqrt_2);
	spl4 = out4_org-(spl6*h_sqrt_2);
	spl5 = out5_org-(spl7*h_sqrt_2);
):
(
	spl0 = out0_org;
	spl1 = out1_org;
	spl4 = out0;
	spl5 = out1;
	spl6 = out4_org-(spl4);
	spl7 = out5_org-(spl5);

);

pos += 2;
pos2=(pos2+2)%(fftsize*2);

mode > 1 ?
(
L_diff=(spl6-spl4)*0.5;
R_diff=(spl7-spl5)*0.5;

spl6-=L_diff*(diffuse_amount);
spl4+=L_diff*(diffuse_amount);

spl7-=R_diff*(diffuse_amount);
spl5+=R_diff*(diffuse_amount);


)

@gfx 500 500
