// from https://forum.cockos.com/showthread.php?t=190168#30 by Tale, geraintluff, junh1024

desc: 5.1 to 9.1 (padded 15.1) upmix. in ALPHA

slider1:4<0,4,1{Ambience,Ambience +,Discrete SFX,Discrete SFX +,Pan Slice,Function Designer}>Mode
slider2:100<0,200,1>Amount (%)
slider3:0<-1,1,0.05>Threshold/Pan
slider4:0<0,1,0.05>Crossover/Width
slider5:75<0,100,1>Cutoff (%)
slider6:1<0,1,0.01>Time Response
slider7:25<0,50,5>FFT Overlap (%)
slider8:12<10,14,1>FFT size (pow2)




// import surroundlib2.txt
import surroundlib3.txt
import surroundlibf.txt

@init

//see surroundlibf.txt

function testpan(thepan,xo)
(
	// scaling=min(abs (   max(thepan-(xo/2),0)*(0.5/xo) )  ,1);
	scaling=min( max( abs(thepan-(Pan ))*(1/xo) -xo  ,0)  ,1 );
	scaling;
);

pdc_bot_ch = 0;
pdc_top_ch = 14;

out0=out1=out4=out5=0;

@slider
fftsize=2^slider8;
pdc_delay = fftsize - 1;
scale = 1/fftsize;

// inspector1=floor(slider3/10);
overlap_w=overlap_sel[slider7/10]; //40 % overlap
// overlap_w=slider3/100;
overlap=floor(overlap_w*fftsize);
i = 0;
loop(fftsize,
	window[i] = min( (0.5 /overlap_w) - abs( (1/overlap_w) *i / fftsize -(0.5/overlap_w)), 1); // adjustable Trapezium window
	i += 1;
);

// gain = 10^(slider1 / 20);
offset = 2*pi / 360 * slider2;

Amount=slider2/100;


mode=slider1+1;//cuz I don't like 0-based mode/slider


mode<3? //  >100% amount will make it louder in ambience modes.
(
	Amount=min(Amount,1); //clamp to 100%
);

Pan=slider3;
Crossover=slider4;

Resp_bins=slider5/100;

elements_to_skip=fftsize-floor(Resp_bins*fftsize);

Time_Response=slider6;



@sample


// Buffer input

buf1_in[2*overlap + pos]	= spl0 * scale;
buf1_in[2*overlap + pos+1]	= spl1 * scale;

buf2_in[2*overlap + pos]	= spl4 * scale;
buf2_in[2*overlap + pos+1]	= spl5 * scale;

(pos += 2) >= (fftsize - overlap )*2? (
	pos = 0;

	fft_4ch_window_overlap_fft();
	
	//silence the frequencies we are skipping
	memset(buf1_fft+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	memset(buf2_fft+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	

	i = 0;
	loop(fftsize / 2 + 1 - (elements_to_skip/2),
	

		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;
 
		fft_4ch_untangle_mags();

		// p1=abs(Magnitudes3[i]-Magnitudes1[i])/(Magnitudes3[i]+Magnitudes1[i]); //for FPA & min2


		mode==6? //subtract
		(
			progress=i/(fftsize/2);
			
			//clamp mag to >0, otherwise will make more sound
			//subtract more, as the frequency increases
			L_scaling_array[i]=max(Magnitudes1[i]-Magnitudes3[i]*(Amount+((1-Response))*progress),0)/Magnitudes1[i];
			R_scaling_array[i]=max(Magnitudes2[i]-Magnitudes4[i]*(Amount+((1-Response))*progress),0)/Magnitudes2[i];
			
			//temporal averaging for <12khz to sound better, none for >12khz to remove transients. inspired by my newvisp4
			//but too much tends to reduce volume
			
			//if it;s <x khz & not a transient, apply averaging to redude artefacts
			i<(fftsize/3) && L_scaling_array[i] < L_scaling_old_array[i]? 
			(
				L_scaling=L_scaling_array[i]*(0.5)+L_scaling_old_array[i]*(1-0.5);
				R_scaling=R_scaling_array[i]*(0.5)+R_scaling_old_array[i]*(1-0.5);
				
				// L_scaling =L_scaling_array[i];
				// R_scaling =R_scaling_array[i];
			)
			:
			(	//equivalent to response of 1
				L_scaling =L_scaling_array[i];
				R_scaling =R_scaling_array[i];
			);
			
			L_scaling_old_array[i]=L_scaling_array[i]*(0.5)+L_scaling_old_array[i]*(1-0.5);
			R_scaling_old_array[i]=R_scaling_array[i]*(0.5)+R_scaling_old_array[i]*(1-0.5);

			lr_complex_apply_2_scaling(L_scaling, R_scaling);
			


			// inspector1=(1-response);
			// inspector2=(1-response)*progress;
			
		);
		
		
		
		(mode==10)? //Min2
		(
			
			//compute pans as per my V3 upmix
			// p1=(Magnitudes3[i]-Magnitudes1[i])/(Magnitudes3[i]+Magnitudes1[i]);
			p2=(Magnitudes4[i]-Magnitudes2[i])/(Magnitudes4[i]+Magnitudes2[i]);
		//pan isn't that useful for dual stereo-different noise recordings, but useful for High Touch! (different singers on different versions)

			
			Angle_Difference1[i]>pi?Angle_Difference1[i]=2*pi-Angle_Difference1[i];//fix angle difference cuz should be under 180*
			Angle_Difference2[i]>pi?Angle_Difference2[i]=2*pi-Angle_Difference2[i]; 

			L_scaling=(1-(min(Angle_Difference1[i]*2,pi)/pi))*(1-   (p1));//double ad cuz 90* ad means it's already purely stereo noise
			R_scaling=(1-(min(Angle_Difference2[i]*2,pi)/pi))*(1-abs(p2));//Reduce mags the more it's panned & phased

			left_r *= L_scaling^Amount; //raised to power because doing linear multiple 1- is tricky
			left_i *= L_scaling^Amount;
			right_r *= R_scaling^Amount;
			right_i *= R_scaling^Amount;

		);  
		
		(mode<3)? // ambience modes
		(
			Angles1[i]=atan2(left_r,left_i);
			Angles2[i]=atan2(right_r,right_i);
			Angles3[i]=atan2(left_r_two,left_i_two);
			Angles4[i]=atan2(right_r_two,right_i_two);
			
			Angle_Difference1[i]=abs(Angles1[i]-Angles2[i]); 
			Angle_Difference2[i]=abs(Angles3[i]-Angles4[i]);

			
			Angle_Difference1[i]>pi?Angle_Difference1[i]=2*pi-Angle_Difference1[i];//fix angle difference cuz should be under 180*
			Angle_Difference2[i]>pi?Angle_Difference2[i]=2*pi-Angle_Difference2[i]; 
			
			mode==1? //90* is at the top
			(
				Angle_Difference1[i]>pi/2?Angle_Difference1[i]=pi-Angle_Difference1[i]; //reflect >90*
				Angle_Difference2[i]>pi/2?Angle_Difference2[i]=pi-Angle_Difference2[i]; 
								
				L_scaling_array[i]=1-(Angle_Difference1[i]*Amount/(pi/2));
				R_scaling_array[i]=1-(Angle_Difference2[i]*Amount/(pi/2));
				
				// lr_complex_apply_1_scaling(L_scaling);
				// l2r2_complex_apply_1_scaling(R_scaling);
			
			):
			(	//180* at top
								
				L_scaling_array[i]=1-(Angle_Difference1[i]*Amount/(pi));
				R_scaling_array[i]=1-(Angle_Difference2[i]*Amount/(pi));
				

			
			);
			
				L_scaling_array[i]= (L_scaling_array[i]*(Time_Response))+(L_scaling_old_array[i]*(1-Time_Response));
				R_scaling_array[i]= (R_scaling_array[i]*(Time_Response))+(R_scaling_old_array[i]*(1-Time_Response));
			
				lr_complex_apply_1_scaling(L_scaling_array[i]);
				l2r2_complex_apply_1_scaling(R_scaling_array[i]);
		
		);
		
		
		
		(mode==3)? //measure pos
		( 
		// pos_X=pos_Y=0;		
		sum_all_mags=Magnitudes1[i]+Magnitudes2[i]+Magnitudes3[i]+Magnitudes4[i];
		
		pos_X[i]=(0-Magnitudes1[i]+Magnitudes2[i]-Magnitudes3[i]+Magnitudes4[i])/sum_all_mags;
		pos_Y[i]=(0-Magnitudes1[i]-Magnitudes2[i]+Magnitudes3[i]+Magnitudes4[i])/sum_all_mags;
		
		//clamp distance to max of 1
		// distance=min(sqrt(pos_X[i]^2+pos_Y[i]^2),1);
		L_scaling_array[i]=min(abs(pos_X[i])+abs(pos_Y[i]),1); //faster measuring of distance
		
		L_scaling_array[i]= (L_scaling_array[i]*(Time_Response))+(L_scaling_old_array[i]*(1-Time_Response));
		


		
		//TODO: add temporal averaging

		//raised to power because doing linear multiple 1- is tricky

		
		lr_complex_apply_1_scaling(L_scaling_array[i]^Amount);
		l2r2_complex_apply_1_scaling(L_scaling_array[i]^Amount);

		
		// centerness=distance/(sum_all_mags);
		
		// inspector1=Magnitudes1[i]+Magnitudes2[i]+Magnitudes3[i]+Magnitudes4[i];
		// inspector1=Magnitudes5[i];
		
		// inspector1=L_scaling^Amount;

		);
		
		(mode==5)? //pan slice
		(
		
		L_pan[i]=abs(Magnitudes3[i]-Magnitudes1[i])/(Magnitudes3[i]+Magnitudes1[i]);
		R_pan[i]=abs(Magnitudes4[i]-Magnitudes2[i])/(Magnitudes4[i]+Magnitudes2[i]);




		L_scaling_array[i]=min( max( abs(L_pan[i]-(Pan ))*(1/Crossover) -Crossover  ,0)  ,1 );
		L_scaling_array[i]= (L_scaling_array[i]*(Time_Response))+(L_scaling_old_array[i]*(1-Time_Response));
		R_scaling_array[i]=min( max( abs(R_pan[i]-(Pan ))*(1/Crossover) -Crossover  ,0)  ,1 );
		R_scaling_array[i]= (R_scaling_array[i]*(Time_Response))+(R_scaling_old_array[i]*(1-Time_Response));
		
		
		left_r *= L_scaling_array[i]*Amount; 
		left_i *= L_scaling_array[i]*Amount;
		left_r_two *= L_scaling_array[i]*Amount; 
		left_i_two *= L_scaling_array[i]*Amount;

		right_r *= R_scaling_array[i]*Amount;
		right_i *= R_scaling_array[i]*Amount;







		right_r_two *= R_scaling_array[i]*Amount;
		right_i_two *= R_scaling_array[i]*Amount;
	
	
	
	
			
			// testpan(Pan,Crossover);
			// p1=;
		);
		

		//new discrete+ mode, but measures M/S of pairs too?
		
		L_scaling_old_array[i]=L_scaling_array[i];
		R_scaling_old_array[i]=R_scaling_array[i];
		
		buf1_fft[a]	= left_r - right_i;
		buf1_fft[b]	= left_i + right_r;
		
		buf2_fft[a]	= left_r_two - right_i_two;
		buf2_fft[b]	= left_i_two + right_r_two;

		
		
		//may reduce glitching when stopped?
		i>0?
		(
			buf1_fft[a2]= left_r + right_i;
			buf1_fft[b2]= right_r - left_i;
			
			buf2_fft[a2]	= left_r_two + right_i_two;
			buf2_fft[b2]	= right_r_two - left_i_two;
		);

		i += 2;
	);

	// Inverse FFT
	fft_ipermute(buf1_fft, fftsize);
	ifft(buf1_fft, fftsize);
	
	fft_ipermute(buf2_fft, fftsize);
	ifft(buf2_fft, fftsize);

	// Overlap-add output
	memcpy(buf1_out, buf1_out + 2*fftsize - 2*overlap, 2*overlap);
	memset(buf1_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	memcpy(buf2_out, buf2_out + 2*fftsize - 2*overlap, 2*overlap);
	memset(buf2_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	i = 0;
	loop(fftsize,
		buf1_out[i] += buf1_fft[i];
		buf1_out[i+1] += buf1_fft[i+1];
		
		buf2_out[i] += buf2_fft[i];
		buf2_out[i+1] += buf2_fft[i+1];
		
		
		i += 2;
	);
);

//buffer the original spl0
out0 = buf1_org[pos2]  ;
out1 = buf1_org[pos2+1];

buf1_org[pos2] =  spl0;
buf1_org[pos2+1] =  spl1;

out4 = buf2_org[pos2]  ;
out5 = buf2_org[pos2+1];

buf2_org[pos2] =  spl4;
buf2_org[pos2+1] =  spl5;

out2 = buf3_org[pos2]  ;
out3 = buf3_org[pos2+1];

buf3_org[pos2]	=  spl2;
buf3_org[pos2+1]=  spl3;

//delay c/lfe
spl2=out2;
spl3=out3;

pos2=(pos2+2)%(pdc_delay*2);

//do output
spl0 = buf1_out[pos];
spl1 = buf1_out[pos+1];

spl4 = buf2_out[pos];
spl5 = buf2_out[pos+1];

//subtract processed from original to get height


spl8=(out0-spl0);
spl9=(out1-spl1);

spl12=(out4-spl4);
spl13=(out5-spl5);

@gfx 500 500

box_width=16;


// gfx_mode=1.0;

g=0;//counter for gfx

gfx_r=gfx_g=gfx_b=gfx_a=1;

gfx_a = 0.5; 


mode==1?
(	//draw guides
	drawbox(gfx_w*0.25,0);
	drawbox(gfx_w*0.75,0);
	drawbox(gfx_w*0.25,gfx_h);
	drawbox(gfx_w*0.75,gfx_h);
	
	/*
	while
	( 
		//trying to make a strip indicating how wide it is by drawing alternating bins on different sides but failing
		set_color(g/(fftsize/2.5)); //update color according to frequency
		drawbox(gfx_w/2+ ((Angle_Difference1[g]*0.5*(-1^(g/8)))/pi) ,0); //draw position for each bin
		// g=ceil(g^1.2);
		g+=8;
		g<fftsize/2 - 1 - (elements_to_skip/2);

	);
	*/
);


mode==2?
(
	drawbox(gfx_w*0,0);
	drawbox(gfx_w*1,0);
	drawbox(gfx_w*0,gfx_h);
	drawbox(gfx_w*1,gfx_h);
	

);

gfx_a = 0.2; 

mode==3?
(	//draw guides, since it pushes absolute center sounds upwards
	drawbox(gfx_w*0.5,0);
	drawbox(gfx_w*0.5,gfx_h);
	
	drawbox(gfx_w*0,gfx_h*0.5);
	drawbox(gfx_w*1,gfx_h*0.5);
	
	drawbox(gfx_w*0.5,gfx_h*0.5);


	while
	( 
		set_color(g/(fftsize/2.5)); //update color according to frequency
		drawbox((pos_X[g]*gfx_w/2)+gfx_w/2,(pos_Y[g]*gfx_h/2)+gfx_h/2); //draw position for each bin
		// g=ceil(g^1.2);
		g+=8;
		g<fftsize/2 - 1 - (elements_to_skip/2);

	);
);

mode==5?
(
	//draw guides, crossover doesn't need /2 since that's covered by the 2nd *0.5
	drawbox(0,(-Pan+1)*0.5*gfx_h);
	drawbox(0,(-Pan+1-(Crossover))*0.5*gfx_h);
	drawbox(0,(-Pan+1+(Crossover))*0.5*gfx_h);

	drawbox(gfx_w,(-Pan+1)*0.5*gfx_h);
	drawbox(gfx_w,(-Pan+1-(Crossover))*0.5*gfx_h);
	drawbox(gfx_w,(-Pan+1+(Crossover))*0.5*gfx_h);


);


mode==6?
(
	g=-1;
	
	loop(2000,
	drawbox(gfx_w*(g+1)/2, gfx_h-(gfx_h*testpan(g,Crossover)));
	g+=0.001;
	);

);
