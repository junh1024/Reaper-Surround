desc: Surround upscale ALPHA
//tags: requested by James HE , modded by geraintluff, modded by junh1024,
//via https://forum.cockos.com/showpost.php?p=1962348&postcount=18

// TODO: performance improvements like moving FFT stuff to @block, frequency selection, half fft for center?

slider1:0<0,100,2>Width
slider2:0<0,100,2>Depth
slider3:50<0,180,2>Rear threshold
slider4:10<0,180,2>Crossover width
slider5:10<0,100,2>Rear Width
slider6:10<0,180,2>Rear LP
slider7:10<0,180,2>All LP
slider8:2<0,4,1{1024,2048,4096,8192}>FFT Size


import surroundlib3.txt

@init 

fftsize = -1;
pdc_bot_ch = 0;
pdc_top_ch = 6;

// array pointers
window=0;

sixteen_k=16384;

buf0 = sixteen_k*1;
buf1 = sixteen_k*2;

buf2 = sixteen_k*3;
buf3 = sixteen_k*4;

buf4 = sixteen_k*5;
buf5 = sixteen_k*6;

Magnitudes1=sixteen_k*11;
Magnitudes2=sixteen_k*12;
Magnitudes3=sixteen_k*13;
// Magnitudes4=sixteen_k*14;
// Magnitudes5=sixteen_k*15;
// Magnitudes6=sixteen_k*16;



Angles1=sixteen_k*21;
Angles2=sixteen_k*22;
Angles3=sixteen_k*23;
// Angles4=sixteen_k*24;
// Angles5=sixteen_k*25;
// Angles6=sixteen_k*26;

Angle_Difference=sixteen_k*31;
// Pan_Array=sixteen_k*32;

Rear_threshold=Crossover_width=0;

gfx_r = gfx_g = gfx_b = 1;

exceeded=0;

center_phase_level=center_mag_level=0;

pi=3.141592653589793238;
h_sqrt_2=0.7071067811865475;

pos=0;
pos2=0;

	mid_r  = mid_i  = 0;
	side_r = side_i = 0;
	
	mid = side = 0;
	
	sideness=0;
	
	center_r = center_i = 0;

	
	
	an1=an2=0;
	
left_r = left_i = right_r= right_i= 0;
left_r_two = left_i_two = right_r_two= right_i_two= 0;

L_scaling=0;
tmp=a=b=a2=b2=0;
	
@slider

sliderfft = (2^(slider8+10))|0;
fftsize != sliderfft ?
(
	pos = 0;
	memset(buf0, 0, 2*fftsize);
	memset(buf1, 0, 2*fftsize);
	memset(buf2, 0, 2*fftsize);
	memset(buf3, 0, 2*fftsize);
	// memset(buf4, 0, 2*fftsize);
	// memset(buf5, 0, 2*fftsize);
	memset(window, 0, fftsize);
	fftsize = sliderfft;
	w = 2.0*$pi/fftsize;
	i = 0;
	
	loop(fftsize/2,
		window[i] = 0.42-0.50*cos(i*w)+0.08*cos(2.0*i*w); //blackman window
		// window[i] =1- (((fftsize/4)-i)/(fftsize/4)); //triangle window
		// window[i] = 0.5;
		i += 1;
	); 
	pdc_delay = fftsize;
);

Rear_threshold= slider3*$pi/180;
Crossover_width=slider4*$pi/180;
width_coeff=slider1/100; 


@sample

pos >= fftsize ?
(
	tmp = buf0;
	buf0 = buf1;
	buf1 = tmp;

	tmp = buf2;
	buf2 = buf3;
	buf3 = tmp;
	
	// tmp = buf4;
	// buf5 = buf5;
	// buf4 = tmp;

	fft(buf0, fftsize);
	fft_permute(buf0, fftsize);

	// fft(buf2, fftsize);
	// fft_permute(buf2, fftsize);

	i = 2;
	loop(fftsize/2 - 1, 
		
		//loop indexes
		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;


		x = buf0[a];
		y = buf0[b];
		x2 = buf0[a2];
		y2 = buf0[b2];

		 left_r = left_r_two =(x + x2)*0.5;
		 left_i = left_i_two =(y - y2)*0.5;
		right_r = right_r_two=(y + y2)*0.5;
		right_i = right_i_two=(x2 - x)*0.5;



		//completely rewritten in Complex instead of Polar for more performance & no fiddly phase compensation

		//convert to M/S
		
		width_coeff<1?
		(
		mid_r  = (left_r+right_r);
		mid_i  = (left_i+right_i);
		side_r = (left_r-right_r);
		side_i = (left_i-right_i);
		
		//measure the magnitude of M&S, to decide how much should go in C/S
		
		mid=sqrt(mid_r^2+mid_i^2);
		side=sqrt(side_r^2+side_i^2);
		
		sideness=min(side/mid,1); //clamp sideness to 1
		
		// sideness=sideness*(Response)+sideness_prev[i]*(1-Response);
		// sideness_prev[i]=sideness;
		
		//0.7 3dB correction
		center_r = mid_r *(1-sideness)*h_sqrt_2;
		center_i = mid_i *(1-sideness)*h_sqrt_2;
		
		// sideness=1;
	

		
		
		//M/S decode LR
		left_r = (mid_r*0.5*sideness) + (side_r*0.5);
		left_i = (mid_i*0.5*sideness) + (side_i*0.5);
		right_r = (mid_r*0.5*sideness) - (side_r*0.5);
		right_i = (mid_i*0.5*sideness) - (side_i*0.5);	
);
		// (i<fftsize/3)? //rear lowpass
		// (
		Angles1[i]=an1=atan2(left_r_two,left_i_two); //radians, normalize to 0,2pi
		Angles2[i]=an2=atan2(right_r_two,right_i_two);	
		Angle_Difference[i]=abs(an1-an2);	

		ad=Angle_Difference[i];
		ad>pi?ad=2*pi-ad;//fix angle difference cuz should be under 180*
		
		
		L_scaling=1-(ad/pi);
		
		 left_r*=L_scaling;
		 left_i*=L_scaling;
		right_r*=L_scaling;
		right_i*=L_scaling;
		// );
		
		
		//BUG: upscales to rear when 100% hard panned
		
		// ad=slider4*$pi/180;
/*
		//from -1 to 1, L to R.
		pan=(Magnitudes2[i]-Magnitudes1[i])/(Magnitudes2[i]+Magnitudes1[i]);

		center_phase_level= 1-min(2*ad/pi,1);;//double ad & clamp to +0, to make C selection 90* wide instead of 180

		//reduce C if the depending on pan & phase
		center_mag_level=(1-abs(pan))*center_phase_level;
		
		// center_mag_level=0;
		
		
		// center_mag_level=(1-abs(pan));
		// ad>$pi/10?center_mag_level=0;//remove from C if angle >9*

		//move to center if centered
		Magnitudes3[i]=center_mag_level*(Magnitudes1[i]+Magnitudes2[i])*0.7071;
		Magnitudes1[i]*=1-center_mag_level;
		Magnitudes2[i]*=1-center_mag_level;
		
		Angles3[i]    =(Angles1[i]+Angles2[i])/2;  //averaging angle sounds bad?
		// Angles3[i]    =Angles1[i]; //prolly wrong, but sounds bad if i add A1 & A2. But LR will be adjusted after this to partially compensate

		//rear stuff
		
		// (Angle_Difference[i]>Rear_threshold-Crossover_width&&Angle_Difference[i]<Rear_threshold+Crossover_width)?
		// (
			// dummy=1;
		// )
		// :
		// (
			// (Angle_Difference[i]>Rear_threshold)?
			// Magnitudes1[i]=Magnitudes2[i]=0;
		
		// );


*/

		//more voodoo
		buf0[a]  = left_r - right_i;
		buf0[b]  = left_i + right_r;
		buf0[a2] = left_r + right_i;
		buf0[b2] = right_r - left_i;

		//prepare c

		buf2[a] = center_r;
		buf2[b] = center_i;
		buf2[a2]= center_r;
		buf2[b2]=-center_i;
		
		i += 2
	);

	fft_ipermute(buf0, fftsize);
	ifft(buf0, fftsize);
	
	// width_coeff<1?(
	fft_ipermute(buf2, fftsize);
	ifft(buf2, fftsize);
// );
	pos=0;
);

//windowing?
w1 = window[pos/2];
w2 = window[(fftsize-pos)/2-1];
sw = (w1+w2)*fftsize;

out0 = (buf0[pos]+buf1[fftsize+pos])/sw;
out1 = (buf0[pos+1]+buf1[fftsize+pos+1])/sw;


out2 = (buf2[pos]+buf3[fftsize+pos])/sw;
// out3 = (buf2[pos+1]+buf1[fftsize+pos+1])/sw;



buf0[pos] = w1*spl0;
buf0[pos+1] = w1*spl1;
buf1[fftsize+pos] = w2*spl0;
buf1[fftsize+pos+1] = w2*spl1;

//more stuff for 2nd input
buf2[pos] = w1*spl2;
// buf2[pos+1] = w1*spl3;
buf3[fftsize+pos] = w2*spl2;
// buf3[fftsize+pos+1] = w2*spl3;

//buffer the original spl0
out4 = buf4[pos2]  ;
out5 = buf5[pos2];

buf4[pos2] =  spl0;
buf5[pos2] =  spl1;




spl4=out4;
spl5=out5;

spl0 = out0;
spl1 = out1;

spl2= out2;

//subtract front from original spl0 to get back
spl4=out4-out0-(h_sqrt_2*out2);
spl5=out5-out1-(h_sqrt_2*out2);


pos += 2;
pos2=(pos2+1)%(fftsize*1);


do_width(width_coeff);

// @gfx 500 16

// box_width=8;

// gfx_a = 0.8; 
// drawbox(floor((pos/fftsize)*gfx_w),8);
