desc: FFT CPU TEST. Does NOT modify audio. Only CPU.

slider1:0<0,1,1>FFT
slider2:50<0,180,2>Rear threshold
slider3:10<0,180,2>Crossover width
slider4:2<0,4,1{1024,2048,4096,8192}>FFT Size


// import surroundlib3.txt

@init 

fftsize = -1;
pdc_bot_ch = 0;
pdc_top_ch = 6;

// array pointers
window=0;

sixteen_k=16384;


buf0 = sixteen_k*1;
buf1 = sixteen_k*2;

buf2 = sixteen_k*3;
buf3 = sixteen_k*4;

buf4 = sixteen_k*5;
buf5 = sixteen_k*6;

pos=0;


Magnitudes1=sixteen_k*11;
Magnitudes2=sixteen_k*12;
Magnitudes3=sixteen_k*13;
// Magnitudes4=sixteen_k*14;
// Magnitudes5=sixteen_k*15;
// Magnitudes6=sixteen_k*16;



Angles1=sixteen_k*21;
Angles2=sixteen_k*22;
Angles3=sixteen_k*23;
// Angles4=sixteen_k*24;
// Angles5=sixteen_k*25;
// Angles6=sixteen_k*26;

// Angle_Difference=sixteen_k*31;
// Pan_Array=sixteen_k*32;

Rear_threshold=Crossover_width=0;

gfx_r = gfx_g = gfx_b = 1;

exceeded=0;

center_phase_level=center_mag_level=0;

pi=3.141592653589793238;



	mid_r  = 0;
	mid_i  = 0;
	side_r = 0;
	side_i = 0;
	
	mid =0;
	side=0;
	
	sideness=0;
	
	real_c = 0;
	imag_c = 0;

	count=0;
	
@slider

sliderfft = (2^(slider4+10))|0;
fftsize != sliderfft ?
(
	pos = 0;
	memset(buf0, 0, 2*fftsize);
	memset(buf1, 0, 2*fftsize);
	memset(buf2, 0, 2*fftsize);
	memset(buf3, 0, 2*fftsize);
	memset(buf4, 0, 2*fftsize);
	memset(buf5, 0, 2*fftsize);
	memset(window, 0, fftsize);
	fftsize = sliderfft;
	w = 2.0*$pi/fftsize;
	i = 0;
	
	loop(fftsize/2,
		window[i] = 0.42-0.50*cos(i*w)+0.08*cos(2.0*i*w); //can make this a triangle?
		i += 1;
	); 
	pdc_delay = fftsize;
);

Rear_threshold= slider2*$pi/180;
Crossover_width=slider3*$pi/180;


@block
// count+=samplesblock;
// (count>fftsize)?
	


@sample

pos >= fftsize ?

(
	tmp = buf0;
	buf0 = buf1;
	buf1 = tmp;

	tmp = buf2;
	buf2 = buf3;
	buf3 = tmp;
	

	
	
	fft(buf0, fftsize);
	fft_permute(buf0, fftsize);

	fft(buf1, fftsize);
	fft_permute(buf1, fftsize);

	i = 2;
	loop(fftsize/2 - 1, 
		

		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;


		x = buf0[a];
		y = buf0[b];
		x2 = buf0[a2];
		y2 = buf0[b2];

		real_l = (x + x2)*0.5;
		imag_l = (y - y2)*0.5;
		real_r = (y + y2)*0.5;
		imag_r = (x2 - x)*0.5;


		x = real_l - imag_r;
		x2 = real_l + imag_r;
		y = imag_l + real_r;
		y2 = real_r - imag_l;

		buf0[a] = x;
		buf0[b] = y;
		buf0[a2] = x2;
		buf0[b2] = y2;
		
		i += 2
	);

	fft_ipermute(buf1, fftsize);
	ifft(buf1, fftsize);
	
	fft_ipermute(buf0, fftsize);
	ifft(buf0, fftsize);
	pos=0;
	
	
count=0;
);


pos += 2;
