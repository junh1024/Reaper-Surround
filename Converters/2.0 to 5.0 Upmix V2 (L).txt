desc: 
//includes code from stock lowpass, delay JSFX.

slider1:0<0,100,2>Width
slider2:0<-100,100,2>Depth
slider3:0<0,1,{Reverse (Narrow), Normal (Wide)}>Polarity of SR (Rear width)
slider4:5000<2000,18000,1000>rear LP freq  (Hz)
slider5:10<0,100,1>delay ms
slider6:0<0,1,0.01>Pan
slider7:1024<512,8192,512>Blocksize
slider8:0.1<0.05,1,0.05>Responsiveness

import surroundlib2.txt
import surroundlib3.txt


@init
//lopass
shape = 0.2 ;  //filter shape (0=sharp, 1=dull)

//delay
// delayposA = 0;
// delayposB = 0;
// delaylen=slider5*srate/1000;

// init_


@slider
//depth
depth_coeff=(slider2*$pi)/200; //depth scaled from 0-100 to 0>half pi
calculate_depth_coeffs(depth_coeff);

blocksize=slider7;
response=slider8;

//lopass
damp=0.01+shape*20;
c = 1/tan($pi*slider4/srate);
fk = 1 / (1 + c*(c+damp));
fa1 = 2 * (1 - c*c) * fk;
fa0 = (1 + c*(c-damp)) * fk;

//delay
calculate_delay_2ch(slider5);

//polarity
polarity=(slider3-0.5)*2;

//behaviour quirks
// slider3==0?(slider5=10):(slider5=0);
slider5==0?(slider3=1); //if delay is 0, should be wide to reduce artefacts.

@block
count+=samplesblock;

(count>blocksize)?
(
	slider6=MidSide_stats_analyze(slider6,response);
	// (((sumR-sumL)/(sumR+sumL))*response)+(slider4*(1-response));//do avg of all samples, with time weighting
	count=0;
);



@sample
mid = 0.7*(spl0+spl1);
side= 0.7*(spl0-spl1);

spl0 = (0.70*mid*(slider6)) + (side*0.2); 
spl1 = (0.70*mid*(slider6)) - (side*0.2); 
spl2=mid*1.4*(1-slider6);

spl4 = 0.5*side; //preupscale

//lopass
fd0l = (fk*spl4) - (fa1*fd1l) - (fa0*fd2l);
spl4 = fd0l + fd1l + fd1l + fd2l;
fd2l = fd1l;
fd1l = fd0l;

spl5=spl4*-1;

//Depth
do_depth(depth_coeff);


// delay
delay_2ch(4); //delay ch4-5

// polarity
spl5 *=polarity; 

MidSide_stats_collect(0);

// do_width(slider6);