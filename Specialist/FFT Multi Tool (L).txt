// from https://forum.cockos.com/showthread.php?t=190168#30 by Tale, geraintluff, junh1024

desc: FFT Multi Tool. Read docs. in ALPHA

slider1:5<0,9,1{Max,Min (Denoise),Align (FPA) A,Subtract AR,Phase limit (unused),Phase reflect,Noise Control/GF3 ARF,Sustainizer A,Split-Combine Frequency A,Min2 A,Measure position,transient control A,pan select,bass boost}>Mode
slider2:100<0,200,1>Amount (%)
slider3:1<0,1,0.01>Frequency Response 
slider4:75<0,100,1>Cutoff (%)
slider5:1<0,1,0.01>Time Response 
slider6:40<0,50,5>FFT Overlap (%)
slider7:12<10,14,1>FFT size (pow2)
slider8:0<0,1,1{No,Yes}>Difference Output



import surroundlib2.txt
import surroundlib3.txt
import surroundlibf.txt

@init



pdc_bot_ch = 0;
pdc_top_ch = 6;


@slider
fftsize=2^slider7;
pdc_delay = fftsize - 1;
scale = 1/fftsize;

// inspector1=floor(slider3/10);
overlap_w=overlap_sel[slider6/10]; //40 % overlap
// overlap_w=slider3/100;
overlap=floor(overlap_w*fftsize);
i = 0;
loop(fftsize,
	window[i] = min( (0.5 /overlap_w) - abs( (1/overlap_w) *i / fftsize -(0.5/overlap_w)), 1); // adjustable Trapezium window
	i += 1;
);

// gain = 10^(slider1 / 20);
offset = 2*pi / 360 * slider2;

Amount=slider2/100;

mode=slider1+1;//cuz I don't like 0-based mode/slider

//V2 Re-Im modes sound different to original Ma-Ang modes

Response=slider3;

Resp_bins=slider4/100;

//limit min. cutoff to
// srate==48000?Resp_bins=max(Resp_bins,0.75);//18k @48k
// srate==44100?Resp_bins=max(Resp_bins,0.8);//17.6k @44k

elements_to_skip=fftsize-floor(Resp_bins*fftsize);



@sample


// Buffer input

buf1_in[2*overlap + pos]	= spl0 * scale;
buf1_in[2*overlap + pos+1]	= spl1 * scale;

buf2_in[2*overlap + pos]	= spl2 * scale;
buf2_in[2*overlap + pos+1]	= spl3 * scale;

(pos += 2) >= (fftsize - overlap )*2? (
	pos = 0;

memcpy(buf1_fft+(fftsize/2),buf1_in+(fftsize/2),fftsize);//copy the middle half cuz window =1;
memcpy(buf2_fft+(fftsize/2),buf2_in+(fftsize/2),fftsize);


// Apply window to top & tail together, so less iterations are needed
i = 0;
loop(fftsize/2-(overlap/4),
	buf1_fft[i]	=buf1_in[i]	*window[i/2];
	buf1_fft[i+1]=buf1_in[i+1]*window[i/2];
	buf1_fft[fftsize*2-i]	=buf1_in[fftsize*2-i]	*window[fftsize-i/2];
	buf1_fft[fftsize*2-i+1]	=buf1_in[fftsize*2-i+1]	*window[fftsize-i/2];
	
	buf2_fft[i]	=buf2_in[i]	*window[i/2];
	buf2_fft[i+1]=buf2_in[i+1]*window[i/2];
	buf2_fft[fftsize*2-i]	=buf2_in[fftsize*2-i]	*window[fftsize-i/2];
	buf2_fft[fftsize*2-i+1]	=buf2_in[fftsize*2-i+1]	*window[fftsize-i/2];
	i += 2;
);


	// Overlap input
	memcpy(buf1_in, buf1_in + fftsize*2 - overlap*2, overlap*2);
	memcpy(buf2_in, buf2_in + fftsize*2 - overlap*2, overlap*2);

	// FFT
	fft(buf1_fft, fftsize);
	fft_permute(buf1_fft, fftsize);
	
	fft(buf2_fft, fftsize);
	fft_permute(buf2_fft, fftsize);
	
	//silence the frequencies we are skipping
	memset(buf1_fft+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	memset(buf2_fft+(fftsize-elements_to_skip), 0, 2*elements_to_skip);
	

	i = 0;
	loop(fftsize / 2 + 1 - (elements_to_skip/2),
	

		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;
 

		x =	buf1_fft[a];
		y =	buf1_fft[b];
		x2=	buf1_fft[a2];
		y2=	buf1_fft[b2];

		// for fft tool
		x_two =	buf2_fft[a];
		y_two =	buf2_fft[b];
		x2_two=	buf2_fft[a2];
		y2_two=	buf2_fft[b2];
		
		 left_r = (x + x2)*0.5;
		 left_i = (y - y2)*0.5;
		right_r = (y + y2)*0.5;
		right_i = (x2 - x)*0.5;
		
		left_r_two = ( x_two + x2_two)*0.5;
		left_i_two = ( y_two - y2_two)*0.5;
		right_r_two= ( y_two + y2_two)*0.5;
		right_i_two= (x2_two -  x_two )*0.5;
		


		Magnitudes1[i]=sqrt(left_r^2+left_i^2); //+very_small_number*0.1
		Magnitudes2[i]=sqrt(right_r^2+right_i^2);
		Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
		Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);

		// Angles1[i]=atan2(left_r,left_i);
		// Angles2[i]=atan2(right_r,right_i);
		// Angles3[i]=atan2(left_r_two,left_i_two);
		// Angles4[i]=atan2(right_r_two,right_i_two);

		p1=abs(Magnitudes3[i]-Magnitudes1[i])/(Magnitudes3[i]+Magnitudes1[i]); //for FPA & min2

	(mode==1)? //Max mode, sounds ok with no overlap, but a bit of artefact
		(
			//independently test mags of L&R
			(Magnitudes1[i]<Magnitudes3[i])?
			(
			left_r=left_r_two;
			left_i=left_i_two;
			);
			
			(Magnitudes2[i]<Magnitudes4[i])?
			(
			right_r=right_r_two;
			right_i=right_i_two;

			//using memcpy isn't faster for small regions
			// memcpy(buf0+a,buf2+a,2);
			// memcpy(buf0+a2,buf2+a2,2);
			);

		);
		
		(mode==2)? //Min mode
		(
			(Magnitudes1[i]>Magnitudes3[i])?
			(
			left_r=left_r_two;
			left_i=left_i_two;
			);
			
			(Magnitudes2[i]>Magnitudes4[i])?
			(
			right_r=right_r_two;
			right_i=right_i_two;
			);
		);

		(	//FPA mode, align only close magnitudes
			mode==3 &&
			p1 <Amount ;
		)
		? 
		(
			Angles3[i]=atan2(left_r_two,left_i_two);
			Angles4[i]=atan2(right_r_two,right_i_two);

			// Angle_Difference1[i]=Angles3[i]-Angles1[i];
			// Angle_Difference2[i]=Angles4[i]-Angles2[i];

			// Angles1[i]+=Angle_Difference1[i]*slider2/100;
			// Angles2[i]+=Angle_Difference2[i]*slider2/100;

			//just synthesize Re & Im with mag set1 & angles set2
			left_r = Magnitudes1[i]*sin(Angles3[i]) ;
			left_i = Magnitudes1[i]*cos(Angles3[i]) ;
			right_r = Magnitudes2[i]*sin(Angles4[i]) ;
			right_i = Magnitudes2[i]*cos(Angles4[i]) ;

		);

		mode==4? //subtract
		(
			progress=i/(fftsize/2);
			
			//clamp mag to >0, otherwise will make more sound
			//subtract more, as the frequency increases
			L_scaling_array[i]=max(Magnitudes1[i]-Magnitudes3[i]*(Amount+((1-Response))*progress),0)/Magnitudes1[i];
			R_scaling_array[i]=max(Magnitudes2[i]-Magnitudes4[i]*(Amount+((1-Response))*progress),0)/Magnitudes2[i];
			
			//temporal averaging for <12khz to sound better, none for >12khz to remove transients. inspired by my newvisp4
			//but too much tends to reduce volume
			
			//if it;s <x khz & not a transient, apply averaging to redude artefacts
			i<(fftsize/3) && L_scaling_array[i] < L_scaling_old_array[i]? 
			(
				L_scaling=L_scaling_array[i]*(0.5)+L_scaling_old_array[i]*(1-0.5);
				R_scaling=R_scaling_array[i]*(0.5)+R_scaling_old_array[i]*(1-0.5);
				
				// L_scaling =L_scaling_array[i];
				// R_scaling =R_scaling_array[i];
			)
			:
			(	//equivalent to response of 1
				L_scaling =L_scaling_array[i];
				R_scaling =R_scaling_array[i];
			);
			
			L_scaling_old_array[i]=L_scaling_array[i]*(0.5)+L_scaling_old_array[i]*(1-0.5);
			R_scaling_old_array[i]=R_scaling_array[i]*(0.5)+R_scaling_old_array[i]*(1-0.5);

			
			left_r  *= L_scaling;
			left_i  *= L_scaling;
			right_r *= R_scaling;
			right_i *= R_scaling;

			// inspector1=(1-response);
			// inspector2=(1-response)*progress;
			
		);
		
		
				mode==5? //phase limit
		(

			mid_r  = (left_r+right_r)*0.5;
			mid_i  = (left_i+right_i)*0.5;
			side_r = (left_r-right_r)*0.5;
			side_i = (left_i-right_i)*0.5;
				
			mid=sqrt(mid_r^2+mid_i^2);
			side=sqrt(side_r^2+side_i^2);


			side>mid?
			(

			// inspector1=mid/side;
			
			side_r*=(mid/side); 
			side_i*=(mid/side); 

			//M/S decode LR
			left_r =  (mid_r) + (side_r);
			left_i =  (mid_i) + (side_i);
			right_r = (mid_r) - (side_r);
			right_i = (mid_i) - (side_i);	
			
			doing=1;

			);
				
			
		);
	
		
		mode==6? //phase reflect, wider bins sound worse w/ no overlap
		(

			// Angles1[i]=atan2(left_r,left_i);
			// Angles2[i]=atan2(right_r,right_i);
			
			// ad1=abs(Angles1[i]-Angles2[i]);//different to below
			
			// ad1>pi?ad1=2*pi-ad1;//fix angle difference cuz should be under 180*
			
			//reverse polarity of R if >90*, but sounds bad
			// ad1>(pi/2)?
			// (
			// right_r *= -1;
			// right_i *= -1;
			// );
			mid_r  = (left_r+right_r)*0.5;
			mid_i  = (left_i+right_i)*0.5;
			side_r = (left_r-right_r)*0.5;
			side_i = (left_i-right_i)*0.5;
				
			mid=sqr(mid_r)+sqr(mid_i);
			side= sqr(side_r)+sqr(side_i);


			
			// ad1>(pi/2)? //if >90*, but sounds good
			side>mid? //if >90*, but sounds good
			(
				//NB: reverse polarity of R is the same thing as swapping M&S

				right_r *=-1  ;
				right_i *=-1  ;	
				
				// doing=2;

			);
				
			
		);
		
		
		(mode==7&&Magnitudes1[i]<old_magnitude)?//Noise control/Gap filler
		(

			L_scaling=Amount;
			R_scaling=Amount;
			
			left_r *= L_scaling;
			left_i *= L_scaling;
			right_r *= R_scaling;
			right_i *= R_scaling;
			
		);
		
		old_magnitude=Magnitudes1[i]*(Response/10)+old_magnitude*(1-Response/10);
		
		(mode==8)? // Sustainizer, does not sound good w/ no overlap
		(

			// left_r*=(-1)^(i/2);
			// right_r*=(-1)^(i/2);
			// left_i*=(-1)^i;
			// right_i*=(-1)^i;
			
			// rand1=ceil(rand(10));
			// rand2=ceil(rand(10));
			
			// left_r*=(-1)^rand1;
			// right_r*=(-1)^rand1;
			// left_i*=(-1)^rand2;
			// right_i*=(-1)^rand2;
			
			//randomise phase, inspired by DTBlkFx
			phaseadj_l = rand(pi)*Amount;
			
			cos_adj_l = cos(phaseadj_l);
			sin_adj_l = sin(phaseadj_l);
			
			//need to put into temporary vars 1st cuz l_i etc get overwritten b4 they're used again= incorrect results
			 left_r_two = left_r* cos_adj_l - left_i* sin_adj_l;
			 left_i_two = left_r* sin_adj_l + left_i* cos_adj_l;
			right_r_two = right_r*cos_adj_l - right_i*sin_adj_l;
			right_i_two = right_r*sin_adj_l + right_i*cos_adj_l;
			
			 left_r =  left_r_two ;
			 left_i =  left_i_two ;
			right_r = right_r_two ;
			right_i = right_i_two ;

		);
		
// inspector1=(i)/fftsize;

		// (mode==9&&((i)/fftsize) > Amount)? //Split-Combine Frequency, freq split (linear scale up to nyquist) depends on Amount
		//Amount controls a log frequency. sqrt of 100 is 10. log can make -ve number so numbers are enlarged 4 comparing
		//does not sound good w/ no overlap. artefacts @ border frequency
		(mode==9&& sqrt((i*100)/fftsize) > Amount*10)?
		(
		
		
			left_r=left_r_two;
			left_i=left_i_two;
			right_r=right_r_two;
			right_i=right_i_two;
		
		);
		
		(mode==10)? //Min2
		(
			Angles1[i]=atan2(left_r,left_i);
			Angles2[i]=atan2(right_r,right_i);
			Angles3[i]=atan2(left_r_two,left_i_two);
			Angles4[i]=atan2(right_r_two,right_i_two);
			
			//compute pans as per my V3 upmix
			// p1=(Magnitudes3[i]-Magnitudes1[i])/(Magnitudes3[i]+Magnitudes1[i]);
			p2=(Magnitudes4[i]-Magnitudes2[i])/(Magnitudes4[i]+Magnitudes2[i]);
		//pan isn't that useful for dual stereo-different noise recordings, but useful for High Touch! (different singers on different versions)
		

			
			ad1=abs(Angles1[i]-Angles3[i]);
			ad2=abs(Angles2[i]-Angles4[i]);

			
			ad1>pi?ad1=2*pi-ad1;//fix angle difference cuz should be under 180*
			ad2>pi?ad2=2*pi-ad2; 

			L_scaling=(1-(min(ad1*2,pi)/pi))*(1-   (p1));//double ad cuz 90* ad means it's already purely stereo noise
			R_scaling=(1-(min(ad2*2,pi)/pi))*(1-abs(p2));//Reduce mags the more it's panned & phased

			left_r *= L_scaling^Amount; //raised to power because doing linear multiple 1- is tricky
			left_i *= L_scaling^Amount;
			right_r *= R_scaling^Amount;
			right_i *= R_scaling^Amount;

		);  
		
		(mode==11)? //measure pos
		( 
		// pos_X=pos_Y=0;		
		sum_all_mags=Magnitudes1[i]+Magnitudes2[i]+Magnitudes3[i]+Magnitudes4[i];
		
		pos_X[i]=(0-Magnitudes1[i]+Magnitudes2[i]-Magnitudes3[i]+Magnitudes4[i])/sum_all_mags;
		pos_Y[i]=(0-Magnitudes1[i]-Magnitudes2[i]+Magnitudes3[i]+Magnitudes4[i])/sum_all_mags;
		
		// distance=min(sqrt(pos_X[i]^2+pos_Y[i]^2),1);
		// distance=min(abs(pos_X[i])+abs(pos_Y[i]),1); //faster
		
		// L_scaling=distance;
		//TODO: add temporal averaging
		
		// left_r  *= L_scaling^Amount; //raised to power because doing linear multiple 1- is tricky
		// left_i  *= L_scaling^Amount;
		// right_r *= L_scaling^Amount;
		// right_i *= L_scaling^Amount;
		
		// centerness=distance/(sum_all_mags);
		
		// inspector1=Magnitudes1[i]+Magnitudes2[i]+Magnitudes3[i]+Magnitudes4[i];
		
		// inspector1=pos_Y[i];
		
		
		);
		

		
		(mode==12&&Magnitudes1[i]>Magnitudes1_old[i])? //transient designer
		(

			// tmp=Magnitudes1[i];
			// Magnitudes1[i]=;
			// Magnitudes1_old[i]=Magnitudes1[i];
			// scaling*old=new
			// scaling=new/old
			
			//more noticeable w/ lower response so it's squared
			L_scaling=(Magnitudes1[i]*(Amount^2)+Magnitudes1_old[i]*(1-(Amount^2)))/Magnitudes1[i];
			// L_scaling=1/L_scaling;
			left_r  *= L_scaling;
			left_i  *= L_scaling;
			right_r *= L_scaling;
			right_i *= L_scaling;
			// inspector1=Magnitudes1[i];
			// inspector2=Magnitudes1_old[i];
			
			doing=1;
		);
		
		// Magnitudes1_old[i]=Magnitudes1[i]*Response+Magnitudes1_old[i]*(1-Response); //sounds bad
		// Magnitudes1_old[i]=Magnitudes1[i];
		
		(mode==13)? //pan select
		(
			abs();
			panselector=Amount-1;
			panwidth=Response;
			pann=min(max((Magnitudes2[i]-Magnitudes1[i])/(Magnitudes2[i]+Magnitudes1[i]),-1),1);
			
			// front_coefficient_temp= 1 - ((phadeg- low_thresh )* (1.0/crossover_width))
			
			// L_scaling=max(abs(pann)-0.5,) ;panselector
			L_scaling=1-((pann- panselector+(panwidth/2))*(1/panwidth));
			
			left_r  *= L_scaling;
			left_i  *= L_scaling;
			right_r *= L_scaling;
			right_i *= L_scaling;
		
		);
		
		(mode==14 && i<fftsize/50)? //bass boost select, from mode 12
		(
			L_scaling=(Magnitudes1[i]*(Amount^2)+Magnitudes1_old[i]*(1-(Amount^2)))/Magnitudes1[i];
			// L_scaling=1/L_scaling;
			left_r  *= L_scaling;
			left_i  *= L_scaling;
			right_r *= L_scaling;
			right_i *= L_scaling;
		
		);
		Magnitudes1_old[i]=Magnitudes1[i];
		
// TODO: center pan
// generic de distort via harmonics
// FFT frequency tool (via memcpy): excite via copy frequency, combine-overlap
// scale shifter
// combine-overlap standalone IIR version
// improved transient designer
// improved Tonal/noise separator, cepstral?
// select notes via MIDI input
// 51>71 upscale V3 modes(square M/S, circle-M/S, circle pan) w/ temporal response
// 51>91h upscale modes(ambience,discrete SFX,pan slice)
// ambisonics 40 V2,3 decoder
		
		
		
		buf1_fft[a]	= left_r - right_i;
		buf1_fft[b]	= left_i + right_r;
		// buf2_fft[a] = center_r;
		// buf2_fft[b] = center_i;	
		
		
		//may reduce glitching when stopped?
		i>0?
		(
			buf1_fft[a2]= left_r + right_i;
			buf1_fft[b2]= right_r - left_i;
			
			//prepare c
			// buf2_fft[a2]= center_r;
			// buf2_fft[b2]=-center_i;
		);

		i += 2;
	);

	// Inverse FFT
	fft_ipermute(buf1_fft, fftsize);
	ifft(buf1_fft, fftsize);
	
	// fft_ipermute(buf2_fft, fftsize);
	// ifft(buf2_fft, fftsize);

	// Overlap-add output
	memcpy(buf1_out, buf1_out + 2*fftsize - 2*overlap, 2*overlap);
	memset(buf1_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	// memcpy(buf2_out, buf2_out + 2*fftsize - 2*overlap, 2*overlap);
	// memset(buf2_out + 2*overlap, 0, 2*fftsize - 2*overlap);
	
	i = 0;
	loop(fftsize,
		buf1_out[i] += buf1_fft[i];
		buf1_out[i+1] += buf1_fft[i+1];
		
		// buf2_out[i] += buf2_fft[i];
		// buf2_out[i+1] += buf2_fft[i+1];
		
		
		i += 2;
	);
);

//buffer the original spl0
out4 = buf1_org[pos2]  ;
out5 = buf1_org[pos2+1];

buf1_org[pos2] =  spl0;
buf1_org[pos2+1] =  spl1;

// spl4=out4;
// spl5=out5;

pos2=(pos2+2)%(pdc_delay*2);


spl0 = buf1_out[pos];
spl1 = buf1_out[pos+1];



//subtract front from original spl0 to get back


// spl2= buf2_out[pos];

spl4=(out4-spl0)*slider8;
spl5=(out5-spl1)*slider8;


