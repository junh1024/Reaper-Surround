desc: multichannel gain, bit reduction & shifter w/ GUI.

slider1:1<0,2,1{Manual,Auto MQ (-1 bit),Auto HQ (+-1 bit)}>Mode
slider2:0<-3,3,0.1>Volume
slider3:16<8,24,1>Bits
slider4:0<-4,4,1>Shift
slider5:6<2,16,1>Channels
slider6:1024<512,8192,512>Blocksize

// /old params
// slider2:16<8,24,1>Bits
// slider3:0<-4,4,1>Shift
// slider4:6<2,16,1>Channels
// slider5:1024<512,8192,512>Blocksize

import surroundlib3.txt


@init
count=0;

// loudness_LT=0;
// loudness_LT_ALL=0;

loudness_IM=100; //array offset
loudness_IM_ALL=0;
loudness_IM_OLD=400; //array offset

bits=200; //array offset
multiply=300; //array offset
inv_multiply_shift=500;

//if channels >100, must be old blocksize, remap to new params
slider5>100?
(
	remapped=1;
	slider6=slider5;
	slider5=slider4;
	slider4=slider3;
	slider3=slider2;
	slider2=0;
);

shift=0;

gfx_r = gfx_g = gfx_b = 1;

chans=slider5;


n=0;




function set_bits_flexi()
(
		multiply[n]=2^(bits[n]-1);
		inv_multiply_shift[n]=(1/multiply[n])*2^slider4;//s3=shift
		
		multiply[n]*=volume;//volume adj must be after above
);

function set_bits_fixed()
(
	loop //calculate the bits based on difference to average
	(chans,

		bits[n]=slider3;
		set_bits_flexi();
		
		n+=1;
	);

);



set_bits_fixed();






@slider
volume = 2^(slider2/6); // convert from dB to a multiplier

blocksize=slider6;
response=10^slider6;

mode=slider1;
chans=slider5;
shift=2^slider4;

chans==2?slider1=0;//manual mode is better for stereo
// slider5=min(chans,num_ch);//limit chans to what exists, doesn't work.


(mode==0)?
(
	n=0;
	set_bits_fixed();
);


@block
count+=samplesblock;
(count>blocksize && mode >0)?
(	
	n = count=max_bits=0;

		// loop //make an average of all chans
		// (chans,
			
			loudness_IM_ALL/=(chans-0.5); //cuz LFE is too quiet
			// n+=1;
		
		// );
		
		(mode>1)?(max_bits=slider3+1;):(max_bits=slider3;); //limit bits deviation to - if MQ
		
		n = 0;
		loop //calculate the bits based on difference to average
		(chans,
			// temp_denominator=loudness_IM[n]*response+loudness_IM_OLD[n]*(1-response);
			// loudness_IM_OLD[n]=temp_denominator;
			// bits[n]=floor(loudness_IM_ALL*slider3/temp_denominator);
			bits[n]=floor(loudness_IM_ALL*slider3/loudness_IM[n]);
			bits[n]=max(min(bits[n],max_bits),slider3-1); //limit bits deviation to +-1 bits
			
			set_bits_flexi();
			
			loudness_IM[n]=0;
			n+=1;
		);
		loudness_IM_ALL=0;

);




@sample

//add all chans to a temp
//unroll loop for performance
	
	temp1=abs(spl0);
	loudness_IM[0]+=temp1;
	loudness_IM_ALL+=temp1;
	spl0=floor(spl0*multiply[0])*inv_multiply_shift[0];
	 //multiply[0]+0.5 without a *sign(spl0) wont make a more accurate rounding
	temp1=abs(spl1);
	loudness_IM[1]+=temp1;
	loudness_IM_ALL+=temp1;
	spl1=floor(spl1*multiply[1])*inv_multiply_shift[1];

m = 2;//loop index, already did 2

loop(chans-2, //doing chans in pairs doesnt seem to make it faster

	temp1=abs(spl(m));
	loudness_IM[m]+=temp1;
	loudness_IM_ALL+=temp1;
	spl(m)=floor(spl(m)*multiply[m])*inv_multiply_shift[m];
	
	m+=1;
);

@gfx 500 100

remapped?gfx_clear=32768; //if remapped on init, set to green

box_width=gfx_w/(chans*1.2);

g=0;//loop index

loop(chans,

	gfx_a = 0.6-0.2*(bits[g]-slider3); //brighten boxes according to bits deviation
	drawbox((g*1.2*box_width)+(box_width/2),0); //1+0.2 cuz add gap

	g+=1;
);
