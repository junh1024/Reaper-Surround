// from https://forum.cockos.com/showthread.php?t=190168#30 by Tale, geraintluff, junh1024

desc: FFT Stereo Tool. Read docs. in ALPHA

slider1:5<0,7,1{Max,Min (Denoise),Align N/A,Subtract AR,Phase limit,Phase reflect,Sustainizer A,bass boost}>Mode
slider2:100<0,200,1>Amount (%)
slider3:1<0,1,0.01>Frequency Response 
slider4:75<0,100,2>Cutoff (%)
slider5:50<0,100,0.1>Time Response 
slider6:40<0,50,5>FFT Overlap (%)
slider7:12<10,14,1>FFT size (pow2)
slider8:0<0,1,1{No,Yes}>Difference Output


import surroundlib2.txt
import surroundlib3.txt
import surroundlibf.txt

@init

//see surroundlibf.txt

pdc_bot_ch = 0;
pdc_top_ch = 2;

actually_do_difference_output=0;

mode<5?
(
	//adaptor so we can reuse 4ch functions
	Magnitudes3=Magnitudes2;
	Magnitudes4=Magnitudes2=sixteen_k*99; //silence them
);
mode==4?
(
	actually_do_difference_output=1;
);


out4=0;

// ext_noinit=1;
// ext_nodenorm=1;

not_silence=1;

@slider
sliderfft = (2^(slider7))|0;
fftsize != sliderfft ? fft_initialize();

//parameter migration from old version, which had Frequency & Time response 0-1 instead of 0-100
slider3<2?slider3*=100;
slider5<2?slider5*=100;

Time_Response=slider5/100;


Amount=max(slider2/100,0.01);//clamp to min of 0.01

mode=slider1+1;//cuz I don't like 0-based mode/slider

//V2 Re-Im modes sound different to original Ma-Ang modes

Response=slider3;

Resp_bins=slider4/100;

//limit min. cutoff to
// srate==48000?Resp_bins=max(Resp_bins,0.75);//18k @48k
// srate==44100?Resp_bins=max(Resp_bins,0.8);//17.6k @44k

elements_to_skip=fftsize-floor(Resp_bins*fftsize);


mode<5?
(
	//adaptor so we can reuse 4ch functions
	Magnitudes3=Magnitudes2;
	Magnitudes4=Magnitudes2=sixteen_k*99; //silence them
);
mode==4?
(
	actually_do_difference_output=1;
);



@sample



sum_all_spl+=abs(spl0)+abs(spl1);	//silence detector

pos >= fftsize ?
(
	tmp = buf1_a;
	buf1_a = buf1_b;
	buf1_b = tmp;

	check_silence_set_fftsize(0); //reduce CPU
	
	fft(buf1_a, fftsize);
	fft_permute(buf1_a, fftsize);

	//silence the frequencies we are skipping
	memset(buf1_a+(fftsize-elements_to_skip), 0, 2*elements_to_skip);

	i = 0;
	loop(fftsize / 2 + 1 - (elements_to_skip/2),
	

		a = i;
		b = a+1;
		a2 = 2*fftsize-i;
		b2 = a2+1;
 
		fft_2ch_untangle_mags_2();
		
		
		// Angles1[i]=atan2(left_r,left_i);
		// Angles2[i]=atan2(right_r,right_i);


		

	(mode==1)? //Max mode, sounds ok with no overlap, but a bit of artefact
		(
			//independently test mags of L&R
			(Magnitudes1[i]<Magnitudes3[i]&&mode==1)?
			(
			right_r=left_r=left_r_two;
			right_i=left_i=left_i_two;
			)
			:
			(
			right_r=left_r;
			right_i=left_i;
			);
			


		);
		
		(mode==2)? //Min mode
		(
			(Magnitudes1[i]>Magnitudes3[i])?
			(
			right_r=left_r=left_r_two;
			right_i=left_i=left_i_two;
			)
			:
			(
			right_r=left_r;
			right_i=left_i;
			);

		);

		p1=abs(Magnitudes3[i]-Magnitudes1[i])/(Magnitudes3[i]+Magnitudes1[i]); //for FPA & min2
		(	//FPA mode, align only close magnitudes
			mode==3 &&
			p1 <Amount ;
		)
		? 
		(
			Angles3[i]=atan2(left_r_two,left_i_two);
			Angles4[i]=atan2(right_r_two,right_i_two);

			// Angle_Difference1[i]=Angles3[i]-Angles1[i];
			// Angle_Difference2[i]=Angles4[i]-Angles2[i];

			// Angles1[i]+=Angle_Difference1[i]*slider2/100;
			// Angles2[i]+=Angle_Difference2[i]*slider2/100;

			//just synthesize Re & Im with mag set1 & angles set2
			left_r = Magnitudes1[i]*sin(Angles3[i]) ;
			left_i = Magnitudes1[i]*cos(Angles3[i]) ;
			right_r = Magnitudes2[i]*sin(Angles4[i]) ;
			right_i = Magnitudes2[i]*cos(Angles4[i]) ;

		);

		mode==4? //subtract
		(
			fft_4ch_subtract();
			
		);
		
		
		(mode==5||mode==6)? //phase limit
		(

			ms_encode_complex();
				
			// mid=sqrt(mid_r^2+mid_i^2);
			// side=sqrt(side_r^2+side_i^2);
			
			//quicker
			mid=sqr(mid_r)+sqr(mid_i);
			side= sqr(side_r)+sqr(side_i);


			side>mid*(1/Amount)?
			(	//phase limit
				mode==5?
				(
					side_r*=(mid/side); 
					side_i*=(mid/side); 

					//M/S decode LR
					left_r =  (mid_r) + (side_r);
					left_i =  (mid_i) + (side_i);
					right_r = (mid_r) - (side_r);
					right_i = (mid_i) - (side_i);	
				):
				(
					//phase reflect, reverse polarity of R is the same thing as swapping M&S
					//sounds better than reverse polarity of R if >90*
					right_r *=-1  ;
					right_i *=-1  ;	

				);
			);
				
		/*	

		 //phase reflect, wider bins sound worse w/ no overlap

			// Angles1[i]=atan2(left_r,left_i);
			// Angles2[i]=atan2(right_r,right_i);
			
			// ad1=abs(Angles1[i]-Angles2[i]);//different to below
			
			// ad1>pi?ad1=2*pi-ad1;//fix angle difference cuz should be under 180*
			
			//reverse polarity of R if >90*, but sounds bad
			// ad1>(pi/2)?
			// (
			// right_r *= -1;
			// right_i *= -1;
			// );
				
		*/	
		
		
		);
		
		
		(mode==7)? // Sustainizer, does not sound good w/ no overlap
		(

			// left_r*=(-1)^(i/2);
			// right_r*=(-1)^(i/2);
			// left_i*=(-1)^i;
			// right_i*=(-1)^i;
			
			// rand1=ceil(rand(10));
			// rand2=ceil(rand(10));
			
			// left_r*=(-1)^rand1;
			// right_r*=(-1)^rand1;
			// left_i*=(-1)^rand2;
			// right_i*=(-1)^rand2;
			
			//randomise phase, inspired by DTBlkFx
			phaseadj_l = rand(pi)*Amount;
			
			cos_adj_l = cos(phaseadj_l);
			sin_adj_l = sin(phaseadj_l);
			
			//need to put into temporary vars 1st cuz l_i etc get overwritten b4 they're used again= incorrect results
			 left_r_two = left_r* cos_adj_l - left_i* sin_adj_l;
			 left_i_two = left_r* sin_adj_l + left_i* cos_adj_l;
			right_r_two = right_r*cos_adj_l - right_i*sin_adj_l;
			right_i_two = right_r*sin_adj_l + right_i*cos_adj_l;
			
			 left_r =  left_r_two ;
			 left_i =  left_i_two ;
			right_r = right_r_two ;
			right_i = right_i_two ;

		);
		
// inspector1=(i)/fftsize;

		// (mode==9&&((i)/fftsize) > Amount)? //Split-Combine Frequency, freq split (linear scale up to nyquist) depends on Amount
		//Amount controls a log frequency. sqrt of 100 is 10. log can make -ve number so numbers are enlarged 4 comparing
		//does not sound good w/ no overlap. artefacts @ border frequency
		(mode==9&& sqrt((i*100)/fftsize) > Amount*10)?
		(
		
		
			left_r=left_r_two;
			left_i=left_i_two;
			right_r=right_r_two;
			right_i=right_i_two;
		
		);
		

		// Magnitudes1_old[i]=Magnitudes1[i]*Response+Magnitudes1_old[i]*(1-Response); //sounds bad
		// Magnitudes1_old[i]=Magnitudes1[i];
		
		

		Magnitudes1_old[i]=Magnitudes1[i];

		//more voodoo
		buf1_a[a]  = left_r - right_i;
		buf1_a[b]  = left_i + right_r;
		buf1_a[a2] = left_r + right_i;
		buf1_a[b2] = right_r - left_i;

		i += 2;
	);

	// Inverse FFT
	fft_ipermute(buf1_a, fftsize);
	ifft(buf1_a, fftsize);
	

	
	check_silence_restore_fftsize();
	pos=0;
);


//windowing?
w1 = window[pos/2];
w2 = window[(fftsize-pos)/2-1];
sw = (w1+w2)*fftsize;

out0 = (buf1_a[pos]+buf1_b[fftsize+pos])/sw;
out1 = (buf1_a[pos+1]+buf1_b[fftsize+pos+1])/sw;

buf1_a[pos] = w1*spl0;
buf1_a[pos+1] = w1*spl1;
buf1_b[fftsize+pos] = w2*spl0;
buf1_b[fftsize+pos+1] = w2*spl1;


//buffer the original spl0
out4 = buf1_org[pos2]  ;
out5 = buf1_org[pos2+1];

buf1_org[pos2] =  spl0;
buf1_org[pos2+1] =  spl1;


spl0 = out0;
// spl1 = out1;

//subtract front from original spl0 to get back
// spl4=(out4-spl0)*slider8;
//this gets a bit tricky cuz we output the processed R or the difference
spl1 = out1*(1-actually_do_difference_output)+(actually_do_difference_output*(out4-   out0 )) ;

pos += 2;
pos2=(pos2+2)%(fftsize*2);


