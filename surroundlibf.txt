desc: FFT stuff

@init
//FFT header
sixteen_k=32768; //distance between arrays

memset(0,0,sixteen_k*50);

buf1_in			= sixteen_k*1;
buf1_fft		= sixteen_k*2;
buf1_out		= sixteen_k*3;
buf1_org		= sixteen_k*4;

buf2_in			= sixteen_k*5;
buf2_fft		= sixteen_k*6;
buf2_out		= sixteen_k*7;
buf2_org		= sixteen_k*8;


overlap_sel		= sixteen_k*9;
window = sixteen_k*10;

pi=3.141592653589793238;
Angle_Difference=sixteen_k*41;
Angle_Difference_old=sixteen_k*42;
Fixed_Response=0.5;
Magnitudes1=sixteen_k*11;
Magnitudes2=sixteen_k*12;
Magnitudes3=sixteen_k*13;
Magnitudes4=sixteen_k*14;

Magnitudes1_old=sixteen_k*21;
Magnitudes2_old=sixteen_k*22;
Magnitudes3_old=sixteen_k*23;
Magnitudes4_old=sixteen_k*24;

L_scaling_array=sixteen_k*31;
L_scaling_old_array=sixteen_k*32;
R_scaling_array=sixteen_k*33;
R_scaling_old_array=sixteen_k*34;

L_scaling=R_scaling=0;

overlap_sel[0]=0.0625;		// 1/16
overlap_sel[1]=0.125;		// 1/8
overlap_sel[2]=0.25;		// 1/4
overlap_sel[3]=0.3125;		// 5/16 or 1/3.2
overlap_sel[4]=0.390625;	// 25/64 or 1/2.56
overlap_sel[5]=0.5;			// 1/2
overlap_w=overlap=0;

Rear_threshold=0;
Crossover_width=0;



exceeded=0;



pi=3.141592653589793238;
h_pi=pi/2;
h_sqrt_2=0.7071067811865475;


an1=an2=0;

ad1=ad2=p1=p2=0;

phaseadj_l = cos_adj_l =sin_adj_l = 0;

mode=Amount=0;

left_r = left_i = right_r= right_i= 0;
left_r_two = left_i_two = right_r_two= right_i_two= 0;

center_r = center_i = 0;
mid_r  = mid_i  = side_r = side_i = 0;

mid = side = 0;
// Sideness[i]=0;

//phase, transient scaling
P_scaling=T_scaling=0;
tmp=a=b=a2=b2=0;


R_width_coeff=0;
	
depth2=0;
doing=0;
	
	
cutoff=cutoff_bins=0;

inspector1=0;
inspector2=0;

Resp_bins=elements_to_skip=0;
sum_all_mags=0;
Fixed_Response=0.5;
progress=0;


pos=pos2=0;

fftsize=0;

//functions
function ms_encode_complex()
(
	mid_r  = (left_r+right_r)*0.5;
	mid_i  = (left_i+right_i)*0.5;
	side_r = (left_r-right_r)*0.5;
	side_i = (left_i-right_i)*0.5;
);

function lr_complex_apply_1_scaling(the_scaling)
(
	 left_r*=the_scaling;
	 left_i*=the_scaling;
	right_r*=the_scaling;
	right_i*=the_scaling;
);