desc: FFT stuff

@init
//FFT header
sixteen_k=32768; //distance between arrays

memset(0,0,sixteen_k*50);

buf1_in			= sixteen_k*1;
buf1_fft		= sixteen_k*2;
buf1_out		= sixteen_k*3;
buf1_org		= sixteen_k*4;

buf2_in			= sixteen_k*5;
buf2_fft		= sixteen_k*6;
buf2_out		= sixteen_k*7;
buf2_org		= sixteen_k*8;


overlap_sel		= sixteen_k*9;
window = sixteen_k*10;

pi=3.141592653589793238;

Angles1=sixteen_k*41;
Angles2=sixteen_k*42;
Angles3=sixteen_k*43;
Angles4=sixteen_k*44;
Angle_Difference=sixteen_k*45;
Angle_Difference_old=sixteen_k*46;
Angle_Difference1=sixteen_k*47;
Angle_Difference2=sixteen_k*48;


Magnitudes1=sixteen_k*11;
Magnitudes2=sixteen_k*12;
Magnitudes3=sixteen_k*13;
Magnitudes4=sixteen_k*14;

Magnitudes1_old=sixteen_k*21;
Magnitudes2_old=sixteen_k*22;
Magnitudes3_old=sixteen_k*23;
Magnitudes4_old=sixteen_k*24;

L_scaling_array=sixteen_k*31;
L_scaling_old_array=sixteen_k*32;
R_scaling_array=sixteen_k*33;
R_scaling_old_array=sixteen_k*34;

	Sideness1=sixteen_k*35;
	Sideness2=sixteen_k*36;
Sideness1_old=sixteen_k*37;
Sideness2_old=sixteen_k*38;

pos_X=sixteen_k*51;
pos_Y=sixteen_k*52;


L_scaling=R_scaling=0;

overlap_sel[0]=0.0625;		// 1/16
overlap_sel[1]=0.125;		// 1/8
overlap_sel[2]=0.25;		// 1/4
overlap_sel[3]=0.3125;		// 5/16 or 1/3.2
overlap_sel[4]=0.390625;	// 25/64 or 1/2.56
overlap_sel[5]=0.5;			// 1/2
overlap_w=overlap=0;

Rear_threshold=0;
Crossover_width=0;



exceeded=0;

// Fixed_Response=0.5;
Time_Response=0;

pi=3.141592653589793238;
h_pi=pi/2;
h_sqrt_2=0.7071067811865475;


an1=an2=0;

ad1=ad2=p1=p2=0;

phaseadj_l = cos_adj_l =sin_adj_l = 0;

mode=Amount=0;

left_r = left_i = right_r= right_i= 0;
left_r_two = left_i_two = right_r_two= right_i_two= 0;

center_r = center_i = center_r_two = center_i_two = 0;
mid_r  = mid_i  = side_r = side_i = 0;

mid = side = 0;


sum_all_spl=0;

//phase, transient scaling
P_scaling=T_scaling=0;
tmp=a=b=a2=b2=0;


R_width_coeff=0;
	
depth2=0;
doing=0;
	
	
cutoff=cutoff_bins=0;

inspector1=0;
inspector2=0;

Resp_bins=elements_to_skip=0;
sum_all_mags=0;

progress=0;


i=0;

pos=pos2=0;

fftsize=0;

//functions
function ms_encode_complex()
(
	mid_r  = (left_r+right_r)*0.5;
	mid_i  = (left_i+right_i)*0.5;
	side_r = (left_r-right_r)*0.5;
	side_i = (left_i-right_i)*0.5;
);

function lr_complex_apply_1_scaling(the_scaling)
(
	 left_r*=the_scaling;
	 left_i*=the_scaling;
	right_r*=the_scaling;
	right_i*=the_scaling;
);

function l2r2_complex_apply_1_scaling(the_scaling)
(
	left_r_two *=the_scaling;
	left_i_two *=the_scaling;
	right_r_two*=the_scaling;
	right_i_two*=the_scaling;
);

function lr_complex_apply_2_scaling(scaling_l, scaling_r)
(
	 left_r*=scaling_l;
	 left_i*=scaling_l;
	right_r*=scaling_r;
	right_i*=scaling_r;
);

function fft_4ch_window_overlap_fft()
(
	// memcpy(buf1_fft+(fftsize/2),buf1_in+(fftsize/2),fftsize);//copy the middle half cuz window =1;
	// memcpy(buf2_fft+(fftsize/2),buf2_in+(fftsize/2),fftsize);
	
	memcpy(buf1_fft,buf1_in,fftsize*2);
	memcpy(buf2_fft,buf2_in,fftsize*2);

	// Apply window to top & tail together, so less iterations are needed
	i = 0;
	loop(fftsize/2-(overlap/4),
		buf1_fft[i]	=buf1_in[i]	*window[i/2];
		buf1_fft[i+1]=buf1_in[i+1]*window[i/2];
		buf1_fft[fftsize*2-i]	=buf1_in[fftsize*2-i]	*window[fftsize-i/2];
		buf1_fft[fftsize*2-i+1]	=buf1_in[fftsize*2-i+1]	*window[fftsize-i/2];
		
		buf2_fft[i]	=buf2_in[i]	*window[i/2];
		buf2_fft[i+1]=buf2_in[i+1]*window[i/2];
		buf2_fft[fftsize*2-i]	=buf2_in[fftsize*2-i]	*window[fftsize-i/2];
		buf2_fft[fftsize*2-i+1]	=buf2_in[fftsize*2-i+1]	*window[fftsize-i/2];
		i += 2;
	);


	// Overlap input
	memcpy(buf1_in, buf1_in + fftsize*2 - overlap*2, overlap*2);
	memcpy(buf2_in, buf2_in + fftsize*2 - overlap*2, overlap*2);

	// FFT
	fft(buf1_fft, fftsize);
	fft_permute(buf1_fft, fftsize);
	
	fft(buf2_fft, fftsize);
	fft_permute(buf2_fft, fftsize);
);

function fft_4ch_untangle_mags()
(
		x =	buf1_fft[a];
		y =	buf1_fft[b];
		x2=	buf1_fft[a2];
		y2=	buf1_fft[b2];

		// for fft tool
		x_two =	buf2_fft[a];
		y_two =	buf2_fft[b];
		x2_two=	buf2_fft[a2];
		y2_two=	buf2_fft[b2];
		
		 left_r = (x + x2)*0.5;
		 left_i = (y - y2)*0.5;
		right_r = (y + y2)*0.5;
		right_i = (x2 - x)*0.5;
		
		left_r_two = ( x_two + x2_two)*0.5;
		left_i_two = ( y_two - y2_two)*0.5;
		right_r_two= ( y_two + y2_two)*0.5;
		right_i_two= (x2_two -  x_two )*0.5;
		
		Magnitudes1[i]=sqrt(left_r^2+left_i^2); //+very_small_number*0.1
		Magnitudes2[i]=sqrt(right_r^2+right_i^2);
		Magnitudes3[i]=sqrt(left_r_two^2+left_i_two^2);
		Magnitudes4[i]=sqrt(right_r_two^2+right_i_two^2);

);

function ms_complex_set_sideness_center()
(
		//measure the magnitude of M&S, to decide how much should go in C/S
	mid=sqrt(mid_r^2+mid_i^2);
	side=sqrt(side_r^2+side_i^2);
	
	// sd=s/m+s or m-s/m+s
	
	Sideness1[i]=min(side/mid,1); //clamp Sideness1[i] to 1
	
	Sideness1[i]=(Sideness1[i]*(Time_Response))+(Sideness1_old[i]*(1-Time_Response));
	Sideness1_old[i]=Sideness1[i];
	
	//0.7 3dB correction
	center_r = mid_r *2*(1-Sideness1[i])*h_sqrt_2;
	center_i = mid_i *2*(1-Sideness1[i])*h_sqrt_2;

);