desc: only things marked V may work

slider1:100<0,100,5>Center Physical Level V
slider2:1<0,2 ,0.1>Bass management for height
slider3:1<0,2 ,0.1>Reserved
slider4:0<0,100,5>Side Physical Level V 
slider5:0<0,100,1>Front height V
slider6:1<0,2 ,0.1>Reserved
slider7:0<-100,100,1>Height depth position V
slider8:100<0,100 ,1>Height height V
slider9: 1<0,1,1,{L R,BtL BtR}>Out12
slider10:1<0,1,1,{C LFE,HL HR}>Out34
slider11:1<0,1,1,{BL, BR}>		Out56
slider12:1<0,1,1,{SL SR,HBL HBR}>Out78
slider13:100<0,200,1>1-2 Width %  V
slider14:100<0,200,1>3-4 Width %  V
slider15:100<0,200,1>5-6 Width %  V
slider16:100<0,200,1>7-8 Width %  V

import surroundlib1.txt
import surroundlib2.txt


@slider
// gain = 2^(slider1/6); // convert from dB to a multiplier


center_physical_level=slider1/100; 
side_physical_level=slider4/100;

LP_freq=500;
b1LP = -exp(-2.0*$pi*LP_freq/srate);
a0LP = 1.0+b1LP;

slider13_coeff=(slider13-100)/100;
slider14_coeff=(slider14-100)/100;
slider15_coeff=(slider15-100)/100;
slider16_coeff=(slider16-100)/100;

slider5_coeff=(slider5-100)/100;


Top_Side_Depth=((slider7 ))/ 100;

Height_height=slider8/100;
Height_height_TS=(100-((100-slider8)*0.75))/100;


FrontHeight=slider5/100;

@sample
heightsL=0;
heightsR=0;
//need top first otherwise bottom gets silenced
// spl0 = spl0 + spl8 + spl10; //top C & LFE are a L & R of a new bottom layer
// spl1 = spl1 + spl9 + spl11;

// spl4 = spl4 + spl12;
// spl5 = spl5 + spl13;
// spl6 = spl6 + spl14;
// spl7 = spl7 + spl15;

// spl8 = 0;
// spl9 = 0;
// spl10= 0;
// spl11= 0;
// spl12= 0;
// spl13= 0;
// spl14= 0;
// spl15= 0;


// spl6 +=  spl14 *(1-Height_height);
// spl7 +=  spl15 *(1-Height_height);

//slider1 Width
spl0 = spl0+0.707*(spl2*(1-center_physical_level));
spl1 = spl1+0.707*(spl2*(1-center_physical_level));
spl2 = spl2*(center_physical_level);


// slider2 BMS H
L_org=spl0 + spl10;
R_org=spl1 + spl11;

L_bass = (tmplLP = a0LP*L_org - b1LP*tmplLP);
R_bass = (tmprLP = a0LP*R_org - b1LP*tmprLP);

spl0 = L_org - L_bass; //L_treble
spl1 = R_org - R_bass; //R_treble


//slider5 FH compression


heightsL=(spl0*FrontHeight);
heightsR=(spl1*FrontHeight);

spl0=(spl0*(1-FrontHeight))+ L_bass;
spl1=(spl1*(1-FrontHeight))+ R_bass;


//slider7
 Top_Side_Depth_adj_v2 ( Top_Side_Depth );


//downmix
// spl0 += spl8 ; //top C & LFE are a L & R of a new bottom layer
// spl1 += spl9 ;
// spl4 += spl12;
// spl5 += spl13;

//slider 8 heightheight
//move TF & TB into ELL F&B
spl0 +=  ( spl8  *(1-Height_height));
spl1 +=  ( spl9  *(1-Height_height));
spl4 +=  (spl12 *(1-Height_height) );
spl5 +=  (spl13 *(1-Height_height) );

spl6 +=( spl14*(1-Height_height_TS) );
spl7 +=( spl15*(1-Height_height_TS) );

//decrease TF & TB 
 spl8  *=Height_height;
 spl9  *=Height_height;
spl12  *=Height_height;
spl13  *=Height_height;

spl14*=Height_height_TS;
spl15*=Height_height_TS;


// slider4 side_physical_level
do_side_physical_level(side_physical_level);

//mapping
heightsL += spl8 + spl12 + spl14;
heightsR += spl9 + spl13 + spl15;
spl2=heightsL ;
spl3=heightsR ;

spl8 = 0;
spl9 = 0;
// spl10= 0;
// spl11= 0;
spl12= 0;
spl13= 0;
spl14= 0;
spl15= 0;


// sliders13-16 width

// out_12_M  =(spl0+spl1)*0.5;
// out_34_M  =(spl2+spl3)*0.5;
// out_56_M  =(spl4+spl5)*0.5;
// out_78_M  =(spl6+spl7)*0.5;

out_12_S  =(spl0-spl1)*0.5; 
out_34_S  =(spl2-spl3)*0.5; 
out_56_S  =(spl4-spl5)*0.5; 
out_78_S  =(spl6-spl7)*0.5; 

spl0 += (out_12_S*slider13_coeff);
spl1 -= (out_12_S*slider13_coeff);
spl2 += (out_34_S*slider14_coeff);
spl3 -= (out_34_S*slider14_coeff);
spl4 += (out_56_S*slider15_coeff);
spl5 -= (out_56_S*slider15_coeff);
spl6 += (out_78_S*slider16_coeff);
spl7 -= (out_78_S*slider16_coeff);