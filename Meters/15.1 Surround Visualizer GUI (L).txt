desc: desc

slider1:1<0,1,1{x,x}>Input layout
slider2:1<0,1,1{x,x}>Mode
slider3:100<0,200 ,1>Scaling
slider4:10<0,10 ,1}>Time response %


in_pin:L
in_pin:R
in_pin:C
in_pin:LFE
in_pin:BL
in_pin:BR
in_pin:SL
in_pin:SR
in_pin:HL
in_pin:HR
in_pin:BtL
in_pin:BtR
in_pin:HBL
in_pin:HBR
in_pin:HSL
in_pin:HSR

out_pin:L
out_pin:R
out_pin:C
out_pin:LFE
out_pin:BL
out_pin:BR
out_pin:SL
out_pin:SR
out_pin:HL
out_pin:HR
out_pin:BtL
out_pin:BtR
out_pin:HBL
out_pin:HBR
out_pin:HSL
out_pin:HSR

import surroundlib3.txt

@init

samples=0;
samples_old=16;
samples_avg=200;
samples_loudness_display=300;

@slider
scaling=slider3/100;
Time_Response=(100-slider4)/100;

@sample
//sample capture
//orig sample needed for 3D analysis
samples[0     ]=     spl0     ;
samples[1     ]=     spl1     ;
samples[2     ]=     spl2     ;
samples[3     ]=     spl3     ;
samples[4     ]=     spl4     ;
samples[5     ]=     spl5     ;
samples[6     ]=     spl6     ;
samples[7     ]=     spl7     ;
samples[8     ]=     spl8     ;
samples[9     ]=     spl9     ;
samples[10     ]=     spl10     ;
samples[11     ]=     spl11     ;
samples[12     ]=     spl12     ;
samples[13     ]=     spl13     ;
samples[14     ]=     spl14     ;
samples[15     ]=     spl15     ;

//abs for loudness
samples_avg[0     ]+=     abs(spl0     );
samples_avg[1     ]+=     abs(spl1     );
samples_avg[2     ]+=     abs(spl2     );
samples_avg[3     ]+=     abs(spl3     );
samples_avg[4     ]+=     abs(spl4     );
samples_avg[5     ]+=     abs(spl5     );
samples_avg[6     ]+=     abs(spl6     );
samples_avg[7     ]+=     abs(spl7     );
samples_avg[8     ]+=     abs(spl8     );
samples_avg[9     ]+=     abs(spl9     );
samples_avg[10     ]+=     abs(spl10     );
samples_avg[11     ]+=     abs(spl11     );
samples_avg[12     ]+=     abs(spl12     );
samples_avg[13     ]+=     abs(spl13     );
samples_avg[14     ]+=     abs(spl14     );
samples_avg[15     ]+=     abs(spl15     );

samples_captured+=1;

@gfx 500 500
// box_width=16;
//box size scales with window size, hits 16 at 500x500
//while not being too small for smaller sizes, like MCP embedding
i=0;
loop(16,
	
	
	samples_loudness_display[i]=sqrt(samples_avg[i]/samples_captured)*scaling;
	samples_avg[i]=0;

	
	i+=1;
	);

	
samples_captured=0;

box_width=floor(2.8*sqrt((gfx_w+gfx_h)/2));

gfx_a = 0.8;
gfx_r = gfx_g = gfx_b = 0;

gfx_x = 0; gfx_y = 0;


//draw ELL speakers

//LR = cyan = includes bottom
gfx_g =1;
gfx_b =1;

gfx_a = samples_loudness_display[0];
drawbox(gfx_w*0.25,gfx_h*0.05);

gfx_a = samples_loudness_display[1];
drawbox(gfx_w*0.75,gfx_h*0.05);

//center
gfx_b =0;
gfx_a = samples_loudness_display[2];
drawbox(gfx_w/2,0);

//Surround
gfx_a = samples_loudness_display[4];
drawbox(gfx_w*0.25,gfx_h*0.95);
gfx_a = samples_loudness_display[5];
drawbox(gfx_w*0.75,gfx_h*0.95);

gfx_a = samples_loudness_display[6];
drawbox(0,gfx_h/2);
gfx_a = samples_loudness_display[7];
drawbox(gfx_w,gfx_h/2);

//draw height

slider1>0?
(
	gfx_g = gfx_b = 0;
	gfx_r = 0.8;


height_toe_in=gfx_w/20;

gfx_a = samples_loudness_display[8];
drawbox(gfx_w/3+height_toe_in,gfx_h/3);
gfx_a = samples_loudness_display[9];
drawbox(gfx_w*2/3-height_toe_in,gfx_h/3);

//H S
gfx_a = samples_loudness_display[12];
drawbox(gfx_w/3+height_toe_in,gfx_h*2/3);
gfx_a = samples_loudness_display[13];
drawbox(gfx_w*2/3-height_toe_in,gfx_h*2/3);

gfx_a = samples_loudness_display[14];
drawbox(gfx_w/3-height_toe_in/2,gfx_h/2);
gfx_a = samples_loudness_display[15];
drawbox(gfx_w*2/3+height_toe_in/2,gfx_h/2);

);

